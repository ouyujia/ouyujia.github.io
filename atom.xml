<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>相遇之初</title>
  
  <subtitle>ouyang</subtitle>
  <link href="https://ouyujia.github.io/atom.xml" rel="self"/>
  
  <link href="https://ouyujia.github.io/"/>
  <updated>2023-11-25T09:12:58.148Z</updated>
  <id>https://ouyujia.github.io/</id>
  
  <author>
    <name>欧阳</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QTHttp通讯</title>
    <link href="https://ouyujia.github.io/2023/11/25/QTHttp%E9%80%9A%E8%AE%AF%E6%8E%A5%E5%8F%A3/"/>
    <id>https://ouyujia.github.io/2023/11/25/QTHttp%E9%80%9A%E8%AE%AF%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-11-25T11:52:29.000Z</published>
    <updated>2023-11-25T09:12:58.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>记录自己使用http通讯经历。</p></blockquote><h3 id="QT使用http通讯开发环境"><a href="#QT使用http通讯开发环境" class="headerlink" title="QT使用http通讯开发环境"></a>QT使用http通讯开发环境</h3><blockquote><p>需要添加模块：network</p></blockquote><h3 id="Http通讯处理思路及注意事项"><a href="#Http通讯处理思路及注意事项" class="headerlink" title="Http通讯处理思路及注意事项"></a>Http通讯处理思路及注意事项</h3><ol><li><p>QT已经封装了http通讯的接口，网络上demo很多，这里不再赘述，需要注意的是get()/post()返回的指针需要手动销毁释放资源，否则会内存泄漏。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(m_reply != <span class="literal">nullptr</span>)</span><br><span class="line">{</span><br><span class="line">    m_reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    m_reply = <span class="literal">nullptr</span>;</span><br><span class="line">}</span><br><span class="line">m_reply = m_manager.<span class="built_in">post</span>(request, m_httpItem.<span class="built_in">getHttpRequestPara</span>());</span><br><span class="line"><span class="comment">//m_reply = m_manager.get(request);</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>对于数据的处理不能只依赖与QNetworkReply::finished，需要结合QNetworkReply::readyRead，否则可能读取的数据不全。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HttpClient::replyFinished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(m_reply == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"m_reply is a null pinter"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_reply-&gt;<span class="built_in">error</span>() == QNetworkReply::NoError)</span><br><span class="line">    {</span><br><span class="line">        <span class="function">emit <span class="title">signalSetHttpItemResendCount</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        QByteArray data = m_replyData;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"full response:"</span> &lt;&lt; data;</span><br><span class="line"></span><br><span class="line">        m_httpItem.<span class="built_in">processReplyFunction</span>(data, m_httpItem.<span class="built_in">getHttpReplyArgument</span>());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {        </span><br><span class="line">        emit <span class="built_in">signalSetHttpItemResendCount</span>(m_httpItem.<span class="built_in">getHttpResendCount</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求存在错误信息，输出错误信息</span></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">" Error:"</span> &lt;&lt; m_reply-&gt;<span class="built_in">errorString</span>() &lt;&lt; <span class="string">" Error code:"</span> &lt;&lt; m_reply-&gt;<span class="built_in">error</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"reply header"</span> &lt;&lt; m_reply-&gt;<span class="built_in">header</span>(QNetworkRequest::KnownHeaders::ContentTypeHeader).<span class="built_in">toString</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    m_replyData.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// 请求完成后释放资源</span></span><br><span class="line">    m_reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    m_reply = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HttpClient::replyReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(m_reply == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; (<span class="string">"m_reply is a null pinter"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    QByteArray data = m_reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; Q_FUNC_INFO &lt;&lt; "response:" &lt;&lt; data;</span></span><br><span class="line">    m_replyData.<span class="built_in">append</span>(data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>对于http通讯需要用到的URL、参数列表、请求方式、协议头、超时时间、超时重复次数等信息可以定义一个HttpItem类集中管理。</p></li><li><p>一般Http都不会只发一条，在有多条Http请求需要顺序发送时可以添加一个HttpClientManager管理类，里面通过一个队列、栈或其他顺序容器维护Http请求。通过一个简单的状态机来处理请求队列。</p></li></ol><h3 id="Http参数处理"><a href="#Http参数处理" class="headerlink" title="Http参数处理"></a>Http参数处理</h3><blockquote><p>在实际运用中，开发者可能与不同的平台对接，不同平台的参数名大多不同，或者对接方与开发者自己的数据名称不同（如：开发者数据名称：name，对接方数据名称：XM）此时需要进行数据名称映射转换。如果每一个对接平台都需要再代码里映射将导致代码冗余，增加维护难度，且在更改对接平台后需要重新编译发布版本，给开发者添加太多工作量，如果频繁更改对接平台，需要重复工作的开发者应该会暴走吧（笑）。笔者工作就需要进行多平台的对接，在团队前辈的提醒下使用一个简单方法处理此问题，这里分享给米娜桑。</p></blockquote><h4 id="参数处理思路"><a href="#参数处理思路" class="headerlink" title="参数处理思路"></a>参数处理思路</h4><p>通过配置文件来映射参数，下面提供一个简单实例给米娜桑参考。</p><p>httpRequestConfig.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='GB2312'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http_config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ip: 请求ip --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ip</span>&gt;</span>192.168.44.24<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- port: 请求端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">http_config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocols</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- protocol name ：请求协议名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocol</span> <span class="attr">name</span>=<span class="string">"patient_query"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">request_info</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- request_path ：请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">request_path</span>&gt;</span>PatientService/getPatientInfoJson<span class="tag">&lt;/<span class="name">request_path</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- request_type：请求类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">request_type</span>&gt;</span>get<span class="tag">&lt;/<span class="name">request_type</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- request_header ： 请求头协议 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">request_header</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">request_header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request_info</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- items：请求参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- items：具体请求参数项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- key： 协议中的请求参数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>testNum<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- db_key：大肺数据库请求参数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>patient_id<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- db_table：大肺数据库表名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_table</span>&gt;</span>patient<span class="tag">&lt;/<span class="name">db_table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  type ： 请求参数数据类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  db_key_type ： 请求数据库参数类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key_type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">db_key_type</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- encryption：是否加密 true：是 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encryption</span>&gt;</span>false<span class="tag">&lt;/<span class="name">encryption</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- remark ：特殊类型映射值备注 项与项之间用,(英文逗号)隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remark</span>&gt;</span>M:1,F:0<span class="tag">&lt;/<span class="name">remark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">protocols</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>httpReplyConfig.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='GB2312'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocols</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  protocol name： 协议名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocol</span> <span class="attr">name</span>=<span class="string">"patient_query"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--  data : 回复数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- key: 协议使用的回复数据参数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>retDdata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- db_key: 大肺软件中使用的回复数据参数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>data<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type :回复数据类型 根据通讯双方自定义类型设置如：json，string，array--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>array<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  msg : 回复消息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">msg</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>msg<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>msg<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- retCode : 回复code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">retCode</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>retCode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>retCode<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>int<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">retCode</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- success : 请求是否成功 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">success</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>success<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>success<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">success</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- items : 回复数据内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item: 协议具体字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- key : 协议参数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>testNum<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- db_key： 大肺数据库字段名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key</span>&gt;</span>patient_id<span class="tag">&lt;/<span class="name">db_key</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- db_table: 参数对于数据库表名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_table</span>&gt;</span>patient<span class="tag">&lt;/<span class="name">db_table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type ： 参数类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  db_key_type ： 请求数据库参数类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">db_key_type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">db_key_type</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- encryption：是否加密 true：是 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encryption</span>&gt;</span>false<span class="tag">&lt;/<span class="name">encryption</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- remark ：特殊类型映射值备注 项与项之间用,(英文逗号)隔开，内容不能留空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remark</span>&gt;</span>M:1,F:0<span class="tag">&lt;/<span class="name">remark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">protocols</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">QT http通讯接口</summary>
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    <category term="net" scheme="https://ouyujia.github.io/categories/QT/net/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
    <category term="HTTP" scheme="https://ouyujia.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>本地套接字QLocalSocket</title>
    <link href="https://ouyujia.github.io/2023/11/24/QT%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>https://ouyujia.github.io/2023/11/24/QT%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</id>
    <published>2023-11-24T11:00:41.000Z</published>
    <updated>2023-11-24T08:32:58.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>工作总用到本地两个进程间通讯，共享内存、信号量、文件、网络通讯都有简单使用过，尝试使用新方法：QLocalSocket，因此自己简单封装了通讯接口。</p></blockquote><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>.pri</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HEADERS += \</span><br><span class="line">    $$PWD/localsocketserver.h</span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">    $$PWD/localsocketserver.cpp</span><br></pre></td></tr></tbody></table></figure><p>.h</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOCALSOCKETSERVER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCALSOCKETSERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLocalSocket&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QByteArray&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LEN 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLocalServer</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLocalSocket</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocalSocketServer</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">ClientCmd</span></span><br><span class="line">    {</span><br><span class="line">        CLIENT_CMD_UNKNOWN = <span class="number">-1</span>,</span><br><span class="line">        <span class="comment">//! 心跳</span></span><br><span class="line">        CLIENT_CMD_HEARTBEAT,</span><br><span class="line">        <span class="comment">//! 测试http连接</span></span><br><span class="line">        CLIENT_CMD_TEST_HTTP_CONNECT,</span><br><span class="line">        <span class="comment">//! 自动同步</span></span><br><span class="line">        CLIENT_CMD_AUTO_UPLOAD,</span><br><span class="line">        <span class="comment">//! 停止自动同步</span></span><br><span class="line">        CLIENT_CMD_STOP_AUTO_UPLOAD,</span><br><span class="line">        CLIENT_CMD_END</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LocalSocketServer</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">LocalSocketServer</span>();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">signalCmdHandle</span><span class="params">(ClientCmd cmd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">listen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleCmd</span><span class="params">(<span class="type">const</span> QJsonValue &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendData</span><span class="params">(<span class="type">const</span> QJsonObject &amp;jsonObj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addLog</span><span class="params">(<span class="type">const</span> QString &amp;info)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendCmd</span><span class="params">(ClientCmd cmd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClientCmd <span class="title">cmdConvert</span><span class="params">(<span class="type">const</span> QJsonObject &amp;jsonObj)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">newConnection</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">errorInformation</span><span class="params">(QLocalSocket::LocalSocketError state)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleReceiveCmd</span><span class="params">(LocalSocketServer::ClientCmd cmd, <span class="type">bool</span> ok)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QLocalServer *m_localServer;</span><br><span class="line">    QLocalSocket *m_localSocket;</span><br><span class="line">    QByteArray m_receiveData;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LOCALSOCKETSERVER_H</span></span></span><br></pre></td></tr></tbody></table></figure><p>.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"localsocketserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLocalServer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDataStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QJsonDocument&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QJsonObject&gt;</span></span></span><br><span class="line"></span><br><span class="line">LocalSocketServer::<span class="built_in">LocalSocketServer</span>(QObject *parent)</span><br><span class="line">    : <span class="built_in">QObject</span>(parent),</span><br><span class="line">      <span class="built_in">m_localServer</span>(<span class="literal">nullptr</span>),</span><br><span class="line">      <span class="built_in">m_localSocket</span>(<span class="literal">nullptr</span>)</span><br><span class="line">{</span><br><span class="line">    m_receiveData.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">listen</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">LocalSocketServer::~<span class="built_in">LocalSocketServer</span>()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(m_localServer != <span class="literal">nullptr</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localServer-&gt;<span class="built_in">close</span>();</span><br><span class="line">        m_localServer-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">        m_localServer = <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_localSocket != <span class="literal">nullptr</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localSocket-&gt;<span class="built_in">disconnectFromServer</span>();</span><br><span class="line">        m_localSocket-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">        m_localSocket = <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LocalSocketServer::listen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (m_localServer == <span class="literal">nullptr</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localServer = <span class="keyword">new</span> <span class="built_in">QLocalServer</span>(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置通讯地址，类似tcp的客户端IP及地址</span></span><br><span class="line">    m_localServer-&gt;<span class="built_in">listen</span>(<span class="string">"Pulmolab"</span>);</span><br><span class="line">    <span class="built_in">connect</span>(m_localServer, &amp;QLocalServer::newConnection, <span class="keyword">this</span>, &amp;LocalSocketServer::newConnection);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::handleCmd</span><span class="params">(<span class="type">const</span> QJsonValue &amp;value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(value.<span class="built_in">isString</span>()</span><br><span class="line">            &amp;&amp; (value.<span class="built_in">toString</span>().<span class="built_in">indexOf</span>(<span class="string">"queryHttpConnect:"</span>) &gt;= <span class="number">0</span>))</span><br><span class="line">    {</span><br><span class="line">        QJsonObject jsonObj;</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"queryHttpConnect"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sendCmd</span>(<span class="built_in">cmdConvert</span>(jsonObj));</span><br><span class="line">        <span class="comment">// 回复信息</span></span><br><span class="line">        <span class="built_in">sendData</span>(jsonObj);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value.<span class="built_in">isString</span>() &amp;&amp; value.<span class="built_in">toString</span>() == <span class="string">"autoUpload:true"</span>)</span><br><span class="line">    {</span><br><span class="line">        QJsonObject jsonObj;</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"autoUpload:true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sendCmd</span>(<span class="built_in">cmdConvert</span>(jsonObj));</span><br><span class="line">        <span class="built_in">sendData</span>(jsonObj);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value.<span class="built_in">isString</span>() &amp;&amp; value.<span class="built_in">toString</span>() == <span class="string">"autoUpload:false"</span>)</span><br><span class="line">    {</span><br><span class="line">        QJsonObject jsonObj;</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"autoUpload:false"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sendCmd</span>(<span class="built_in">cmdConvert</span>(jsonObj));</span><br><span class="line">        <span class="built_in">sendData</span>(jsonObj);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::sendData</span><span class="params">(<span class="type">const</span> QJsonObject &amp;jsonObj)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (m_localSocket == <span class="literal">nullptr</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">addLog</span>(<span class="string">"localSocket disconnect send cmd failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    QByteArray array =  <span class="built_in">QJsonDocument</span>(jsonObj).<span class="built_in">toJson</span>(QJsonDocument::Compact);</span><br><span class="line">    array.<span class="built_in">prepend</span>(<span class="string">"@START"</span>);</span><br><span class="line">    array.<span class="built_in">append</span>(<span class="string">"@END"</span>);</span><br><span class="line">    m_localSocket-&gt;<span class="built_in">write</span>(array);</span><br><span class="line">    QString info =  <span class="string">"send cmd "</span>;</span><br><span class="line">    info += array;</span><br><span class="line">    <span class="built_in">addLog</span>(info);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::addLog</span><span class="params">(<span class="type">const</span> QString &amp;info)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span> () &lt;&lt; info;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::sendCmd</span><span class="params">(LocalSocketServer::ClientCmd cmd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">emit <span class="title">signalCmdHandle</span><span class="params">(cmd)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">LocalSocketServer::ClientCmd <span class="title">LocalSocketServer::cmdConvert</span><span class="params">(<span class="type">const</span> QJsonObject &amp;jsonObj)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QString strCmd = jsonObj.<span class="built_in">value</span>(<span class="string">"cmd"</span>).<span class="built_in">toString</span>();</span><br><span class="line">    ClientCmd cmd = CLIENT_CMD_UNKNOWN;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"queryHttpConnect"</span> == strCmd)</span><br><span class="line">    {</span><br><span class="line">        cmd = CLIENT_CMD_TEST_HTTP_CONNECT;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"autoUpload:true"</span> == strCmd)</span><br><span class="line">    {</span><br><span class="line">        cmd = CLIENT_CMD_AUTO_UPLOAD;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"autoUpload:false"</span> == strCmd)</span><br><span class="line">    {</span><br><span class="line">        cmd = CLIENT_CMD_STOP_AUTO_UPLOAD;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cmd;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::newConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    m_localSocket = m_localServer-&gt;<span class="built_in">nextPendingConnection</span>();</span><br><span class="line">    <span class="built_in">connect</span>(m_localSocket, &amp;QLocalSocket::readyRead, <span class="keyword">this</span>, &amp;LocalSocketServer::readData);</span><br><span class="line">    <span class="built_in">connect</span>(m_localSocket, &amp;QLocalSocket::disconnected, m_localSocket, &amp;QLocalSocket::deleteLater);</span><br><span class="line">    <span class="comment">// 处理连接</span></span><br><span class="line">    <span class="built_in">addLog</span>(<span class="string">"New client connected."</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::readData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QDataStream <span class="title">DS</span><span class="params">(m_localSocket)</span></span>;</span><br><span class="line">    <span class="type">char</span> data[MAX_LEN];</span><br><span class="line"></span><br><span class="line">    qint64 iLen = m_localSocket-&gt;<span class="built_in">read</span>(data, MAX_LEN);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index_start = <span class="number">0</span>,index_end = <span class="number">0</span>;</span><br><span class="line">    QVector&lt;QJsonObject&gt; receiveData;</span><br><span class="line">    <span class="function">QByteArray <span class="title">array</span><span class="params">(data, iLen)</span></span>;</span><br><span class="line">    QByteArray tmp;</span><br><span class="line"></span><br><span class="line">    m_receiveData.<span class="built_in">append</span>(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        index_start = m_receiveData.<span class="built_in">indexOf</span>(<span class="string">"@START"</span>);</span><br><span class="line">        index_end = m_receiveData.<span class="built_in">indexOf</span>(<span class="string">"@END"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( index_start &gt;= <span class="number">0</span> &amp;&amp; index_end &gt;= <span class="number">0</span> )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (index_end &gt; index_start)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 正常情况</span></span><br><span class="line">                tmp = m_receiveData.<span class="built_in">mid</span>(index_start + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@START"</span>)), index_end - index_start</span><br><span class="line">                                        - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@START"</span>)));</span><br><span class="line">                QJsonDocument jsondoc = QJsonDocument::<span class="built_in">fromJson</span>(tmp);</span><br><span class="line">                <span class="keyword">if</span> (jsondoc.<span class="built_in">isObject</span>())</span><br><span class="line">                {</span><br><span class="line">                    receiveData.<span class="built_in">append</span>(jsondoc.<span class="built_in">object</span>());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index_end &gt;= <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 移除“@END”和前面的内容</span></span><br><span class="line">            QByteArray newarray = m_receiveData.<span class="built_in">right</span>(m_receiveData.<span class="built_in">size</span>() -</span><br><span class="line">                                                      (index_end + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@END"</span>))));</span><br><span class="line">            m_receiveData.<span class="built_in">swap</span>(newarray);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_receiveData.<span class="built_in">size</span>() &gt; (MAX_LEN &lt;&lt; <span class="number">2</span>))</span><br><span class="line">        {</span><br><span class="line">            m_receiveData.<span class="built_in">clear</span>(); <span class="comment">// 防止垃圾越来越多</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index_start &lt; <span class="number">0</span> ||  index_end &lt; <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (receiveData.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    foreach (<span class="type">const</span> QJsonObject&amp;jsonobj, receiveData)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(jsonobj.<span class="built_in">contains</span>(<span class="string">"cmd"</span>) )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">handleCmd</span>(jsonobj[<span class="string">"cmd"</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::errorInformation</span><span class="params">(QLocalSocket::LocalSocketError state)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt;(<span class="built_in">QString</span>(<span class="string">"错误码:%1"</span>).<span class="built_in">arg</span>(QString::<span class="built_in">number</span>(state)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketServer::handleReceiveCmd</span><span class="params">(LocalSocketServer::ClientCmd cmd, <span class="type">bool</span> ok)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QJsonObject jsonObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (cmd)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> CLIENT_CMD_TEST_HTTP_CONNECT:</span><br><span class="line">    {</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"queryHttpConnect"</span>);</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CLIENT_CMD_AUTO_UPLOAD:</span><br><span class="line">    {</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"autoUpload:true"</span>);</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CLIENT_CMD_STOP_AUTO_UPLOAD:</span><br><span class="line">    {</span><br><span class="line">        jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"autoUpload:false"</span>);</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    QString result = ok ? <span class="string">"succeed"</span> : <span class="string">"failed"</span>;</span><br><span class="line">    jsonObj.<span class="built_in">insert</span>(<span class="string">"result"</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sendData</span>(jsonObj);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>.pri</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEADERS += \</span><br><span class="line">    $$PWD/localsocketclient.h</span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">    $$PWD/localsocketclient.cpp</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>.h</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOCALSOCKETCLIENT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCALSOCKETCLIENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qsystemdetection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qlocalsocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qjsonvalue.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LEN 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocalSocketClient</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LocalSocketClient</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">LocalSocketClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connectServer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendData</span><span class="params">(<span class="type">const</span> QJsonObject &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! 服务器发送指令</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">handleSocketSendCmd</span><span class="params">(<span class="type">const</span> QJsonValue &amp;value)</span></span>;</span><br><span class="line">    <span class="comment">//! 服务器回复指令</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleSocketReceiveCmd</span><span class="params">(<span class="type">const</span> QJsonObject &amp;obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">heartbeat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//!错误信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">errorInformation</span><span class="params">(QLocalSocket::LocalSocketError state)</span></span>;</span><br><span class="line">    <span class="comment">//!断开链接</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">disconnectFromServer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connectSuccess</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readData</span><span class="params">()</span></span>;</span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//!判断连接服务器是否成功</span></span><br><span class="line">    <span class="type">bool</span> m_isConnectedServer;</span><br><span class="line">    QLocalSocket *m_localSocket;</span><br><span class="line"><span class="comment">//    QTimer *m_heartbeat;</span></span><br><span class="line">    QByteArray m_receiveData;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LOCALSOCKETCLIENT_H</span></span></span><br></pre></td></tr></tbody></table></figure><p>.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"localsocketclient.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QJsonObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QJsonDocument&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDataStream&gt;</span></span></span><br><span class="line"></span><br><span class="line">LocalSocketClient::<span class="built_in">LocalSocketClient</span>(QObject *parent)</span><br><span class="line">    : <span class="built_in">QObject</span>(parent),</span><br><span class="line">      <span class="built_in">m_isConnectedServer</span>(<span class="literal">false</span>),</span><br><span class="line">      <span class="built_in">m_localSocket</span>(<span class="literal">NULL</span>)<span class="comment">/*,</span></span><br><span class="line"><span class="comment">      m_heartbeat(NULL)*/</span></span><br><span class="line">{    </span><br><span class="line">    <span class="keyword">if</span> (m_localSocket == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localSocket = <span class="keyword">new</span> <span class="built_in">QLocalSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//        connect(m_socket,SIGNAL(error(QLocalSocket::LocalSocketError)),this,SLOT(errorInformation(QLocalSocket::LocalSocketError)));</span></span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">connected</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">connectSuccess</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">disconnected</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">disconnectFromServer</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">readData</span>()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    if (m_heartbeat == NULL)</span></span><br><span class="line"><span class="comment">//    {</span></span><br><span class="line"><span class="comment">//        m_heartbeat = new QTimer(this);</span></span><br><span class="line"><span class="comment">//        m_heartbeat-&gt;setInterval(1000);</span></span><br><span class="line"><span class="comment">//        connect(m_heartbeat, &amp;QTimer::timeout, this, &amp;LocalSocketClient::heartbeat);</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">LocalSocketClient::~<span class="built_in">LocalSocketClient</span>()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (m_localSocket != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localSocket-&gt;<span class="built_in">disconnectFromServer</span>();</span><br><span class="line">        m_localSocket-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">        m_localSocket = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    if (m_heartbeat != NULL)</span></span><br><span class="line"><span class="comment">//    {</span></span><br><span class="line"><span class="comment">//        m_heartbeat-&gt;stop();</span></span><br><span class="line"><span class="comment">//        m_heartbeat-&gt;deleteLater();</span></span><br><span class="line"><span class="comment">//        m_heartbeat = NULL;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::connectServer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (m_localSocket == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        m_localSocket = <span class="keyword">new</span> <span class="built_in">QLocalSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//        connect(m_socket,SIGNAL(error(QLocalSocket::LocalSocketError)),this,SLOT(errorInformation(QLocalSocket::LocalSocketError)));</span></span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">connected</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">connectSuccess</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">disconnected</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">disconnectFromServer</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(m_localSocket,<span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">readData</span>()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_isConnectedServer)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 设置服务器地址，类似tcp通讯中的服务器IP及端口</span></span><br><span class="line">        m_localSocket-&gt;<span class="built_in">connectToServer</span>(<span class="string">"Pulmolab"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::sendData</span><span class="params">(<span class="type">const</span> QJsonObject &amp;jsonObj)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!m_isConnectedServer)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">connectServer</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> reconnectCount = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!m_isConnectedServer &amp;&amp; reconnectCount &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">connectServer</span>();</span><br><span class="line">        --reconnectCount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_isConnectedServer)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    QByteArray array =  <span class="built_in">QJsonDocument</span>(jsonObj).<span class="built_in">toJson</span>(QJsonDocument::Compact);</span><br><span class="line">    array.<span class="built_in">prepend</span>(<span class="string">"@START"</span>);</span><br><span class="line">    array.<span class="built_in">append</span>(<span class="string">"@END"</span>);</span><br><span class="line">    m_localSocket-&gt;<span class="built_in">write</span>(array);</span><br><span class="line">    <span class="built_in">qDebug</span> () &lt;&lt; <span class="string">"send cmd "</span> &lt;&lt; array;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::handleSocketSendCmd</span><span class="params">(<span class="type">const</span> QJsonValue &amp;value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="keyword">if</span>(value.<span class="built_in">isString</span>() &amp;&amp; value.<span class="built_in">toString</span>() == <span class="string">"queryHttpConnectSucceed"</span>)</span><br><span class="line">   {</span><br><span class="line">       <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"handle cmd queryHttpConnectSucceed"</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::handleSocketReceiveCmd</span><span class="params">(<span class="type">const</span> QJsonObject &amp;obj)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="built_in">value</span>(<span class="string">"cmd"</span>).<span class="built_in">isString</span>() &amp;&amp; obj.<span class="built_in">value</span>(<span class="string">"result"</span>).<span class="built_in">isString</span>())</span><br><span class="line">    {</span><br><span class="line">        QString cmd = obj.<span class="built_in">value</span>(<span class="string">"cmd"</span>).<span class="built_in">toString</span>();</span><br><span class="line">        QString result = obj.<span class="built_in">value</span>(<span class="string">"result"</span>).<span class="built_in">toString</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span> () &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"cmd: "</span> &lt;&lt; cmd &lt;&lt; <span class="string">", result:"</span> &lt;&lt; result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::heartbeat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QJsonObject jsonObj;</span><br><span class="line">    jsonObj.<span class="built_in">insert</span>(<span class="string">"cmd"</span>, <span class="string">"heartbeat"</span>);</span><br><span class="line">    <span class="built_in">sendData</span>(jsonObj);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::errorInformation</span><span class="params">(QLocalSocket::LocalSocketError state)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(state)</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt;(<span class="built_in">QString</span>(<span class="string">"错误码:%1"</span>).<span class="built_in">arg</span>(QString::<span class="built_in">number</span>(state)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::disconnectFromServer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    m_isConnectedServer = <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::connectSuccess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    m_isConnectedServer = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocalSocketClient::readData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QDataStream <span class="title">DS</span><span class="params">(m_localSocket)</span></span>;</span><br><span class="line">    <span class="type">char</span> data[MAX_LEN];</span><br><span class="line"></span><br><span class="line">    qint64 iLen = m_localSocket-&gt;<span class="built_in">read</span>(data, MAX_LEN);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index_start = <span class="number">-1</span>, index_end = <span class="number">-1</span>;</span><br><span class="line">    QVector&lt;QJsonObject&gt; receiveData;</span><br><span class="line">    <span class="function">QByteArray <span class="title">array</span><span class="params">(data, iLen)</span></span>;</span><br><span class="line">    QByteArray tmp;</span><br><span class="line"></span><br><span class="line">    m_receiveData.<span class="built_in">append</span>(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        index_start = m_receiveData.<span class="built_in">indexOf</span>(<span class="string">"@START"</span>);</span><br><span class="line">        index_end = m_receiveData.<span class="built_in">indexOf</span>(<span class="string">"@END"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( index_start&gt;=<span class="number">0</span> &amp;&amp; index_end&gt;= <span class="number">0</span> )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (index_end &gt; index_start)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 正常情况</span></span><br><span class="line">                tmp = m_receiveData.<span class="built_in">mid</span>(index_start + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@START"</span>)),</span><br><span class="line">                                        index_end-index_start - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@START"</span>)));</span><br><span class="line">                QJsonDocument jsondoc = QJsonDocument::<span class="built_in">fromJson</span>(tmp);</span><br><span class="line">                <span class="keyword">if</span> (jsondoc.<span class="built_in">isObject</span>())</span><br><span class="line">                {</span><br><span class="line">                    receiveData.<span class="built_in">append</span>(jsondoc.<span class="built_in">object</span>());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index_end&gt;= <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 移除“@END”和前面的内容，继续解析下一条指令</span></span><br><span class="line">            QByteArray newarray = m_receiveData.<span class="built_in">right</span>(m_receiveData.<span class="built_in">size</span>()</span><br><span class="line">                                                      - (index_end + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">strlen</span>(<span class="string">"@END"</span>))));</span><br><span class="line">            m_receiveData.<span class="built_in">swap</span>(newarray);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_receiveData.<span class="built_in">size</span>() &gt; (MAX_LEN &lt;&lt; <span class="number">2</span>))</span><br><span class="line">        {</span><br><span class="line">            m_receiveData.<span class="built_in">clear</span>(); <span class="comment">// 防止垃圾越来越多</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index_start&lt;<span class="number">0</span> ||  index_end&lt; <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (receiveData.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    foreach(<span class="type">const</span> QJsonObject&amp;jsonobj, receiveData)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(jsonobj.<span class="built_in">contains</span>(<span class="string">"cmd"</span>) &amp;&amp; jsonobj.<span class="built_in">contains</span>(<span class="string">"result"</span>))</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">handleSocketReceiveCmd</span>(jsonobj);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(jsonobj.<span class="built_in">contains</span>(<span class="string">"cmd"</span>) &amp;&amp; !(jsonobj.<span class="built_in">contains</span>(<span class="string">"result"</span>)))</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">handleSocketSendCmd</span>(jsonobj);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">基于QLocalSocket的本地套接字接口</summary>
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    <category term="net" scheme="https://ouyujia.github.io/categories/QT/net/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
    <category term="Socket" scheme="https://ouyujia.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>QT信号和槽解析</title>
    <link href="https://ouyujia.github.io/2023/05/05/QT%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%E8%A7%A3%E6%9E%90/"/>
    <id>https://ouyujia.github.io/2023/05/05/QT%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%E8%A7%A3%E6%9E%90/</id>
    <published>2023-05-05T11:50:59.000Z</published>
    <updated>2023-11-24T02:09:18.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><ul><li>Qt使用信号与槽机制进行对象间的通信，当某个对象的状态发生变化时，该对象会触发一个信号，该信号和另外一些对象的槽函数绑定，信号的触发将导致执行这些槽函数，这些槽函数将处理第一个对象状态的变化，完成对象之间的通信。</li><li>信号和槽本质上还是回调函数。</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>信号槽是 Qt 框架引以为豪的机制之一。所谓信号槽，实际就是观察者模式。当某个事件发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，它就会使用连接（connect）函数，意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。</p><p>槽的本质是类的成员函数，其参数可以是任意类型的。和普通C++成员函数几乎没有区别，它可以是虚函数；也可以被重载；可以是公有的、保护的、私有的、也可以被其他C++成员函数调用。唯一区别的是：槽可以与信号连接在一起，每当和槽连接的信号被发射的时候，就会调用这个槽。</p><hr><p>自定义信号槽注意事项：</p><blockquote><ol><li>发送者和接收者都需要是QObject的子类（当然，槽函数是全局函数、Lambda 表达式等无需接收者的时候除外）；</li><li>使用 signals 标记信号函数，信号是一个函数声明，返回 void，不需要实现函数代码；</li><li>槽函数是普通的成员函数，作为成员函数，会受到 public、private、protected 的影响；</li><li>使用 emit 在恰当的位置发送信号(emit 是一个空宏定义,只作为一个信号发送的标志,没有实际含义,不适用emit也可以发送信号)；</li><li>使用QObject::connect()函数连接信号和槽；</li><li>任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数。</li></ol></blockquote><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><h3 id="信号的发出"><a href="#信号的发出" class="headerlink" title="信号的发出"></a>信号的发出</h3><p>由于某种条件到达可能引起了对象改变，其内部状态将发生改变，这时候对象就会发出信号。信号是公共访问函数，可以从任何地方发出，但是建议：<strong>【只从定义该信号的类及其子类发出信号】</strong>。</p><p>在Qt框架下，信号发出分为两种：</p><ol><li>【每个类预定义的信号】：这些信号何时发出可以通过查看官方文档获知。</li><li>【自定义的信号】：这些信号的发出由开发人员自行定义。</li></ol><h3 id="信号的处理"><a href="#信号的处理" class="headerlink" title="信号的处理"></a><strong>信号的处理</strong></h3><p>当一个信号发出时，连接到它的槽函数通常会立即执行，就像一个普通函数调用一样。在这种情况下，信号和槽函数机制是完全独立于GUI事件循环的，也并不会干扰GUI的事件循环。<code>emit</code>语句之后的代码将在所有槽函数都返回之后才执行。如果使用<strong>排队连接（queued connections）</strong>，情况略有不同，在这种情况下，emit关键字后面的代码将立即继续，槽函数将在后续执行。</p><p>如果几个槽函数连接到同一个信号上，当信号发出时，这些槽函数将按照它们连接时的顺序依次执行【这一点很重要】。</p><p>信号是由<code>moc</code>工具自动生成，不能在.cpp文件中实现，所以信号永远不能有返回类型(必须使用<code>void</code>关键字定义信号)。</p><p>关于信号和槽参数的注意事项：经验表明，如果信号和槽函数不使用特殊类型，那么代码具有极强的可重用性。</p><p>下表是使用<code>connect()</code>创建信号和槽函数连接时，可以指定5种不同的连接类型：</p><table><thead><tr><th>序号</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>Qt::AutoConnection</td><td>如果接收者生活在发出信号的线程中，Qt::DirectConnection被使用。否则，使用Qt::QueuedConnection。连接类型是在信号发出时确定。【这是Qt创建信号和槽函数时的默认连接方式】</td></tr><tr><td>2</td><td>Qt::DirectConnection</td><td>当信号发出时，槽函数立即被调用。槽函数在发送信号的线程中执行。</td></tr><tr><td>3</td><td>Qt::QueuedConnection</td><td>当控制返回到接收方线程的事件循环时，将调用槽函数。槽函数在接收方的线程中执行。</td></tr><tr><td>4</td><td>Qt::BlockingQueuedConnection</td><td>与Qt::QueuedConnection相同，只是在槽函数返回之前线程会阻塞。如果接收方存在于发送信号的线程中，则不能使用此连接，否则应用程序将会死锁。</td></tr><tr><td>5</td><td>Qt::UniqueConnection</td><td>这是一个标志，可以使用按位OR与上述的连接类型进行组合。当Qt::UniqueConnection被设置时，如果连接已经存在，QObject::connect()将失败(例如，如果相同的信号已经连接到同一对对象的相同槽位)。注：这个标志在Qt 4.6中引入。</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="槽函数"><a href="#槽函数" class="headerlink" title="槽函数"></a>槽函数</h2><p>当一个连接到槽函数的信号被发射时，槽函数将被调用。槽函数是普通的C++函数，在实际开发中也可以正常调用；它们唯一的特点是：【信号可以与它们相连接】。</p><p>由于槽是普通的成员函数，所以它们在直接调用时遵循普通的C++规则。但是，作为槽函数时，任何组件都可以通过信号连接从而调用它们。</p><p>还可以将槽函数定义为虚拟的，这在开发中非常有用。</p><p>与回调机制相比，信号和槽函数机制的速度稍微慢一些，这一点对于实际应用程序来说，这种差别并不显著。一般来说，发送一个连接到某些槽函数的信号，比直接调用非虚函数要慢大约10倍。这是定位连接对象、安全地遍历所有连接(即检查后续接收方在发射过程中没有被销毁)以及以函数调用增加的开销。虽然10个非虚函数调用听起来很多，但是它比new操作或delete操作的开销要小得多。一旦在后台执行一个需要new或delete的字符串、向量或列表操作，信号和槽函数的开销只占整个函数调用开销的很小一部分。在槽函数中执行系统调用时也是如此（或间接调用超过十个函数）。因此信号和槽函数机制的简单性和灵活性是值得的，这些开销在实际应用场景下甚至不会注意到。</p><p>注意，当与基于Qt的应用程序一起编译时，定义为信号或槽的变量的第三方库可能会导致编译器出现警告和错误。要解决这个问题，使用<code>#undef</code>来定义出错的预处理器符号即可。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p>一个信号可以和多个槽相连</p><blockquote><p>如果是这种情况，这些槽会一个接一个的被调用，但是它们的调用顺序是不确定的。</p></blockquote></li><li><p>多个信号可以连接到一个槽</p><blockquote><p>只要任意一个信号发出，这个槽就会被调用。</p></blockquote></li><li><p>一个信号可以连接到另外的一个信号</p><blockquote><p>当第一个信号发出时，第二个信号被发出。除此之外，这种信号-信号的形式和信号-槽的形式没有什么区别。</p></blockquote></li><li><p>槽可以被取消链接</p><blockquote><p>这种情况并不经常出现，因为当一个对象delete之后，Qt自动取消所有连接到这个对象上面的槽。</p></blockquote></li><li><p>使用Lambda 表达式</p><blockquote><p>在使用 Qt 5 的时候，能够支持 Qt 5 的编译器都是支持 Lambda 表达式的。</p></blockquote></li></ol><p><strong>总结:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/20190109151732226.png" alt="信号和槽"></p><h3 id="带有默认参数的信号和槽函数"><a href="#带有默认参数的信号和槽函数" class="headerlink" title="带有默认参数的信号和槽函数"></a><strong>带有默认参数的信号和槽函数</strong></h3><p>信号和槽可以包含参数，参数可以有默认值。例如：<code>QObject::destroyed()</code>：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroyed</span><span class="params">(QObject* = <span class="literal">nullptr</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>当<code>QObject</code>被删除时，它会发出这个<code>QObject::destroyed()</code>信号。无论我们在哪里有一个悬空引用指向已删除的QObject，都希望捕捉到这个信号，这样就可以清除它。合适的槽参数可以是：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">objectDestroyed</span><span class="params">(QObject* obj = <span class="literal">nullptr</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用QObject-connect-将信号连接到槽函数的三种方法"><a href="#使用QObject-connect-将信号连接到槽函数的三种方法" class="headerlink" title="使用QObject::connect()将信号连接到槽函数的三种方法"></a><strong>使用QObject::connect()将信号连接到槽函数的三种方法</strong></h3><ul><li><p>第一种方法：使用函数指针(qt5)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, &amp;QObject::destroyed, <span class="keyword">this</span>, &amp;MyObject::objectDestroyed);</span><br></pre></td></tr></tbody></table></figure><p>将<code>QObject::connect()</code>与函数指针一起使用有几个优点。它允许编译器检查信号的参数是否与槽的参数兼容。当然，编译器还可以隐式地转换参数。</p></li><li><p>第二种方法：连接到C++ 11的lambdas</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, &amp;QObject::destroyed, <span class="keyword">this</span>, [=](){ <span class="keyword">this</span>-&gt;m_objects.<span class="built_in">remove</span>(sender); });</span><br></pre></td></tr></tbody></table></figure><p>在这种情况下，我们在connect()调用中提供这个上下文。上下文对象提供关于应该在哪个线程中执行接收器的信息。</p><p>当发送方或上下文被销毁时，<code>lambda</code>将断开连接。注意：当信号发出时，函数内部使用的所有对象依然是激活的。</p></li><li><p>第三种方法：使用<code>QObject::connect()</code>以及信号和槽声明宏。(qt4)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在<span class="built_in">SIGNAL</span>()和<span class="built_in">SLOT</span>()宏中包含参数(如果参数有默认值)的规则是：传递给<span class="built_in">SIGNAL</span>()宏的参数不能少于传递给<span class="built_in">SLOT</span>()宏的参数。</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用disconnect断开信号-x2F-槽连接"><a href="#使用disconnect断开信号-x2F-槽连接" class="headerlink" title="使用disconnect断开信号/槽连接"></a><strong>使用disconnect断开信号/槽连接</strong></h3><p><code>disconnect()</code>用于断开对象发送器中的信号与对象接收器中的方法的连接。如果连接成功断开，则返回true；否则返回false。</p><p>当对信号/槽关联的两方中的任何一个对象进行销毁时，信号/槽连接将被移除。</p><p><code>disconnect()</code>有三种使用方法，如下示例所示：</p><p>1、断开所有与对象相连的信号/槽：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(myObject, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></tbody></table></figure><p>相当于非静态重载函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject-&gt;<span class="built_in">disconnect</span>();</span><br></pre></td></tr></tbody></table></figure><p>2、断开所有与特定信号相连的对象：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(myObject, <span class="built_in">SIGNAL</span>(<span class="built_in">mySignal</span>()), <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></tbody></table></figure><p>相当于非静态重载函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject-&gt;<span class="built_in">disconnect</span>(<span class="built_in">SIGNAL</span>(<span class="built_in">mySignal</span>()));</span><br></pre></td></tr></tbody></table></figure><p>3、断开特定接收对象的连接：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(myObject, <span class="literal">nullptr</span>, myReceiver, <span class="literal">nullptr</span>);</span><br></pre></td></tr></tbody></table></figure><p>相当于非静态重载函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject-&gt;<span class="built_in">disconnect</span>(myReceiver);</span><br></pre></td></tr></tbody></table></figure><p><code>nullptr</code>可以用作通配符，分别表示“任何信号”、“任何接收对象”或“接收对象中的任何槽”。</p><p>如下格式的使用示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(发送对象，信号，接收对象，方法）</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>发送对象</strong>不会是nullptr。</li><li>如果<strong>信号</strong>为nullptr，将断开<strong>接收对象</strong>和<strong>槽函数</strong>与所有<strong>信号</strong>的连接。否则只断开指定的<strong>信号</strong>。</li><li>如果<strong>接收对象</strong>是nullptr，它断开所有关联该信号的连接。否则，只断开与<strong>接收对象</strong>的槽函数连接。</li><li>如果方法是nullptr，它会断开任何连接到<strong>接收对象</strong>的连接。如果不是，只有命名为<strong>方法</strong>的槽函数连接将被断开。如果没有<strong>接收对象</strong>，<strong>方法</strong>必须为nullptr。即：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(发送对象，信号，<span class="literal">nullptr</span>，<span class="literal">nullptr</span>）</span><br></pre></td></tr></tbody></table></figure><h3 id="使用Qt与第三方信号和槽函数"><a href="#使用Qt与第三方信号和槽函数" class="headerlink" title="使用Qt与第三方信号和槽函数"></a><strong>使用Qt与第三方信号和槽函数</strong></h3><p>当第三方库中也有信号/槽函数机制时，这时候又需要使用Qt的信号和槽函数机制。对于这种开发场景，Qt可以在同一个项目中使用这两种机制。需将下面一行添加到qmake项目(.pro)工程配置文件中：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG += no_keywords</span><br></pre></td></tr></tbody></table></figure><p>该配置将告诉Qt不要定义moc关键字信号、槽函数和<code>emit</code>，因为这些名称将被第三方库使用（例如<code>Boost</code>）。如果要在使用no_keywords标志下继续使用Qt信号和槽机制，需将源文件中所有的Qt moc关键字替换为对应的Qt宏：Q_SIGNALS(或Q_SIGNAL)、Q_SLOT(或Q_SLOT)和Q_EMIT。</p><h2 id="信号和槽优缺点"><a href="#信号和槽优缺点" class="headerlink" title="信号和槽优缺点"></a>信号和槽优缺点</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>为什么Qt使用信号与槽机制而不是传统的回调函数机制进行对象间的通信呢？<br>回调函数的本质是“你想让别人的代码执行你的代码，而别人的代码你又不能动”这种需求下产生的。<br>回调函数是函数指针的一种用法，如果多个类都关注某个类的状态变化，此时需要维护一个列表，以存放多个回调函数的地址。对于每一个被关注的类，都需要做类似的工作，因此这种做法效率低，不灵活。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>Qt使用信号与槽机制来解决这个问题，程序员只需要指定一个类含有哪些信号函数、哪些槽函数，Qt会处理信号函数和槽函数之间的绑定。当信号函数被调用时，Qt会找到并执行与其绑定的槽函数。允许一个信号函数和多个槽函数绑定，Qt会依次找到并执行与一个信号函数绑定的所有槽函数，这种处理方式更灵活。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ul><li>类型安全：需要关联的信号槽的签名必须是等同的。即信号的参数类型和参数个数同接受该信号的槽的参数类型和参数个数相同。若信号和槽签名不一致，则编译器会报错。</li><li>松散耦合：信号和槽机制减弱了Qt对象的耦合度。激发信号的Qt对象无需知道是哪个对象的那个槽接收它发出的信号，它只需要在适当的时间发送适当的信号即可，而不需要关心是否被接收和哪个对象接收了。Qt保证适当的槽得到了调用，即使关联的对象在运行时删除，程序也不会崩溃。</li><li>灵活性：一个信号可以关联多个槽，多个信号也可以关联同一个槽。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>速度较慢：与回调函数相比，信号和槽机制运行速度比直接调用非虚函数慢10倍左右。</li></ul><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>需要定位接收信号的对象。</li><li>安全地遍历所有槽。</li><li>编组，解组传递参数。</li><li>多线程的时候，信号需要排队等候。（然而，与创建对象的new操作及删除对象的delete操作相比，信号和槽的运行代价只是他们很少的一部分。信号和槽机制导致的这点性能损失，对于实时应用程序是可以忽略的。）</li></ul><h2 id="信号和槽无法连接问题分析"><a href="#信号和槽无法连接问题分析" class="headerlink" title="信号和槽无法连接问题分析"></a>信号和槽无法连接问题分析</h2><ol><li><p>使用qt4信号和槽方法转发信号到qt5信号和槽方法中</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slot</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>, <span class="built_in">SIGNAL</span>(<span class="type">void</span> <span class="built_in">signal</span>()), <span class="keyword">this</span>, <span class="built_in">SIGNAL</span>(<span class="type">void</span> <span class="built_in">signal2</span>()));</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>, &amp;test::siganl2, <span class="keyword">this</span>, &amp;test::slot);</span><br></pre></td></tr></tbody></table></figure><p>原因:qt4使用宏连接信号和槽,本质是将信号和槽函数转为字符串,而qt5是使用函数指针,因此无法混用转发信号.</p></li><li><p>使用qt4信号和槽的方式连接时带了形参</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">singal</span><span class="params">(QString text)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slot</span><span class="params">(QString text)</span></span>;</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>, <span class="built_in">SIGNAL</span>(<span class="type">void</span> <span class="built_in">signal</span>(QString text)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="type">void</span> <span class="built_in">slot</span>(QString text))); <span class="comment">// 可能会在编译时报错,也可能不会,但在运行时slot一定不会生效</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>使用自定义类型参数而没有进行注册</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span></span><br><span class="line">{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">(Myclass ha)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slot</span><span class="params">(Myclass he)</span></span>;</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>, &amp;test::siganl2, <span class="keyword">this</span>, &amp;test::slot);<span class="comment">// 槽函数没有生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型注册</span></span><br><span class="line"><span class="number">1</span>、注册位置：在第一次使用此类链接跨线程的signal/slot之前，一般在当前类的构造函数中进行注册；</span><br><span class="line">  <span class="number">2</span>、注册方法：在当前类的顶部包含：<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMetaType&gt;</span>，构造函数中加入代码：qRegisterMetaType<span class="string">&lt;MyClass&gt;</span>(<span class="string">"Myclass"</span>)；</span></span><br><span class="line">  <span class="number">3</span>、Myclass的引用类型需单独注册：<span class="built_in">qRegisterMetaType</span>&lt;MyClass&gt;(<span class="string">"Myclass&amp;"</span>)；</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>连接信号和槽时,对象是空指针(未定义)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span></span><br><span class="line">{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slot</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">connect</span>(ha, &amp;test::siganl2, he, &amp;test::slot);<span class="comment">// 槽函数没有生效</span></span><br><span class="line">Myclass ha = <span class="keyword">new</span> <span class="built_in">Myclass</span>();</span><br><span class="line">Myclass he = <span class="keyword">new</span> <span class="built_in">Myclass</span>();</span><br></pre></td></tr></tbody></table></figure><p>信号和槽一定要在对象定义之后进行连接才能生效</p></li><li><p>槽函数声明为私有方法在其他类对象连接失败(其他博客里提及,本人验证了放在私有里也是可以的,索性也列在这里供大家参考)</p><p>test.h</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Test</span><span class="params">(QObject* parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>; <span class="comment">//! 私有槽函数可以被其他类对象连接，并不是只能由本类内部连接</span></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Test2</span><span class="params">(QObject* parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">signalPrint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TEST_H</span></span></span><br></pre></td></tr></tbody></table></figure><p>test.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Test::<span class="built_in">Test</span>(QObject *parent)</span><br><span class="line">    : <span class="built_in">QObject</span>(parent)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"private is connected\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Test2::<span class="built_in">Test2</span>(QObject *parent)</span><br><span class="line">    : <span class="built_in">QObject</span>(parent)</span><br><span class="line">{</span><br><span class="line">    Test test;</span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>, <span class="built_in">SIGNAL</span>(<span class="built_in">signalPrint</span>()), &amp;test, <span class="built_in">SLOT</span>(<span class="built_in">print</span>()));</span><br><span class="line">    <span class="function">emit <span class="title">signalPrint</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>执行结果</p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1683285517791.png" alt="执行结果"></p><p>后面在实际开发中发现：A类槽函数定义为私有，在B类中通过信号连接A类私有槽函数，编译提示错误</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在MainWidget类中连接LocalSocket类的私有槽handleReceiveCmd失败</span></span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>, &amp;MainWidget::signalReceiveCmd, m_localSocket, &amp;LocalSocket::handleReceiveCmd);</span><br></pre></td></tr></tbody></table></figure><p>提示错误</p><blockquote><p>mainwidget.cpp:44:79: error: ‘handleReceiveCmd’ is a private member of ‘LocalSocket’<br>localsocket.h:63:10: note: declared private here</p></blockquote></li></ol><h3 id="虚拟槽函数"><a href="#虚拟槽函数" class="headerlink" title="虚拟槽函数"></a>虚拟槽函数</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/qq_30725967/article/details/104515447">Qt之信号signals和槽slots详解_private slots</a></p><p><a href="https://kevin-org.blog.csdn.net/article/details/121232524?spm=1001.2014.3001.5502">Qt之信号槽机制</a></p><p><a href="https://zhuanlan.zhihu.com/p/603617075">Qt一篇全面的信号和槽函数机制总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;机制&quot;&gt;&lt;a href=&quot;#机制&quot; class=&quot;headerlink&quot; title=&quot;机制&quot;&gt;&lt;/a&gt;机制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Qt使用信号与槽机制进行对象间的通信，当某个对象的状态发生变化时，该对象会触发一个信号，该信号和另外一些对象的槽函数绑定，信号的</summary>
      
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>page</title>
    <link href="https://ouyujia.github.io/2023/05/04/QTHtml/"/>
    <id>https://ouyujia.github.io/2023/05/04/QTHtml/</id>
    <published>2023-05-04T02:00:41.000Z</published>
    <updated>2023-05-05T11:26:51.981Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>XML解析</title>
    <link href="https://ouyujia.github.io/2023/05/04/XML%E8%A7%A3%E6%9E%90/"/>
    <id>https://ouyujia.github.io/2023/05/04/XML%E8%A7%A3%E6%9E%90/</id>
    <published>2023-05-04T02:00:41.000Z</published>
    <updated>2023-11-24T05:52:52.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在项目开发中需要使用xml文件作为配置文件，阅读公司前辈写的xml解析接口后，梳理使用方法及实现。 </p></blockquote><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/XML/XML_Introduction">XML</a>（Extensible Markup Language）是一种类似于 HTML，但是没有使用预定义标记的语言。因此，可以根据自己的设计需求定义专属的标记。这是一种强大将数据存储在一个可以存储、搜索和共享的格式中的方法。最重要的是，因为 XML 的基本格式是标准化的，如果你在本地或互联网上跨系统或平台共享或传输 XML，由于标准化的 XML 语法，接收者仍然可以解析数据。</p><p>有许多基于 XML 的语言，包括 XHTML、MathML、SVG、RSS 和 RDF (en-US)。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="QT使用"><a href="#QT使用" class="headerlink" title="QT使用"></a>QT使用</h3><blockquote><p>Qt中使用xml需要添加模块：xml</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui xml</span><br></pre></td></tr></tbody></table></figure></blockquote><hr><blockquote><p>注：此接口使用的是QDomDocument实现读大型文件将会造成卡顿且使用大量内存，不关系内存使用情况，大型文件可在独立线程处理避免卡顿。</p></blockquote><p>.h</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> XMLPARSER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XMLPARSER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDomDocument&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief The XmlParser class</span></span><br><span class="line"><span class="comment"> * 1.支持从配置文件中读取配置，保存在内存中；</span></span><br><span class="line"><span class="comment"> * 2.支持保存xml配置到本地内存中；</span></span><br><span class="line"><span class="comment"> * 3.支持对配置结点数据的操作：增、删、改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XmlParser</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief XmlParser  xml文件解析者，支持对xml文件的读写、修改操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">XmlParser</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">XmlParser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief open  打开XML文件。</span></span><br><span class="line"><span class="comment">     * @param fileName fileName文件名。</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，打开失败或XML文件解析失败。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">open</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief ifDnoExistCreate 如果不存在，则创建</span></span><br><span class="line"><span class="comment">     * @param fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ifDnoExistCreate</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief saveToFile 保存当前文件到本地内存</span></span><br><span class="line"><span class="comment">     * @return  true，保存成功；false，保存失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">saveToFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief saveToFile  保存指定文件到本地内存</span></span><br><span class="line"><span class="comment">     * @param fileName  待保存的文件名</span></span><br><span class="line"><span class="comment">     * @return  true，保存成功；false，保存失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">saveToFile</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span>;</span><br><span class="line">    <span class="comment">//! 关闭打开的文件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">closeFile</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getNode  获取指定路径下的结点数据</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param tag 返回获取结点数据</span></span><br><span class="line"><span class="comment">     * @return   true，成功，false，结点为空数据或结点不存在</span></span><br><span class="line"><span class="comment">     * @attention \b 不推荐使用，在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QDomElement &amp;tag)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief setNode  设置指定路径下的结点数据</span></span><br><span class="line"><span class="comment">     * @param indexStr  结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param srcTag 设置的结点数据</span></span><br><span class="line"><span class="comment">     * @return   true，成功，false，结点为空数据或父结点不存在</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QDomElement &amp;srcTag)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief addNode  添加一个新结点</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param tagName  结点名字</span></span><br><span class="line"><span class="comment">     * @param value  结点值</span></span><br><span class="line"><span class="comment">     * @param attrs 结点属性</span></span><br><span class="line"><span class="comment">     * @return   true，成功；false，父结点不存在或xml文件损坏。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;tagName, <span class="type">const</span> QString &amp;value = QString(),</span></span></span><br><span class="line"><span class="params"><span class="function">                 <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs = QMap&lt;QString, QString&gt;())</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief removeNode 删除一个结点，默认删除结点路径下的首个结点，如匹配结点属性时，则会删除匹配属性的结点</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param attrs 结点属性，非空时会判断结点属性</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，结点或父结点不存在。</span></span><br><span class="line"><span class="comment">     * @note 支持存在多个相同结点名称时，删除其中匹配结点属性的一个结点</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">removeNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs = QMap&lt;QString, QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief setValue 设置结点值，默认设置结点路径下首个结点的值，如匹配结点属性时，则会设置匹配属性结点的值</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param value 带设置的结点值</span></span><br><span class="line"><span class="comment">     * @param attar 结点属性，非空时会判断结点属性</span></span><br><span class="line"><span class="comment">     * @return true，成功；false，结点或父结点不存在。</span></span><br><span class="line"><span class="comment">     * @note 结点没有值时，会新增一个结点</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;value,</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attrs=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getValue 获取结点值，默认获取结点路径下首个结点的值，如匹配结点属性时，则会获取匹配属性结点的值</span></span><br><span class="line"><span class="comment">     * @param indexStr  结点路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param value  返回读取结点的值</span></span><br><span class="line"><span class="comment">     * @param attar 结点属性，非空时会判断结点属性</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，结点不存在。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QString&amp;value,</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attrs=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getValue 获取结点路径下，所有并列结点的值</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param valueList 返回所有并列结点的值</span></span><br><span class="line"><span class="comment">     * @return  成功；false，结点不存在。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QStringList &amp;valueList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief setAttr  设置结点路径下首个结点的属性</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param attr  结点属性名称；</span></span><br><span class="line"><span class="comment">     * @param value  要设定属性的值。</span></span><br><span class="line"><span class="comment">     * @return   true，成功；false，结点不存在。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setAttr</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, <span class="type">const</span> QString &amp;value)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getAttr  获取结点路径下首个结点的属性</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param attr  结点属性名称；</span></span><br><span class="line"><span class="comment">     * @param value 要获取的值。</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，结点元素不存在。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getAttr</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, QString &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getAttrs  获取结点路径下所有属性值</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @param attr  结点属性名称；</span></span><br><span class="line"><span class="comment">     * @param value 要获取的值。</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，结点元素不存在。</span></span><br><span class="line"><span class="comment">     * @attention \b 在存在并列节点时会有问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getAttrs</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, QStringList &amp;valueList)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      @example 下面为读写XML新的接口</span></span><br><span class="line"><span class="comment">            //!获取DomElement</span></span><br><span class="line"><span class="comment">            QDomElement dee = db_config_xml.getDomElement("item");</span></span><br><span class="line"><span class="comment">            //!根据指定的DomElement 获取子的DomElement</span></span><br><span class="line"><span class="comment">            dee = db_config_xml.getDomElement(dee,"type");</span></span><br><span class="line"><span class="comment">            qDebug()&lt;&lt;dee.tagName()&lt;&lt;dee.attribute("name")&lt;&lt;dee.text();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!获取指定的节点</span></span><br><span class="line"><span class="comment">            QMap&lt;QString,QString&gt; map;</span></span><br><span class="line"><span class="comment">            map.insert("name","sex");</span></span><br><span class="line"><span class="comment">            QDomElement dee_special = db_config_xml.getDomElement("item", map );</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;dee_special.childNodes().size();i++)</span></span><br><span class="line"><span class="comment">            {</span></span><br><span class="line"><span class="comment">                qDebug()&lt;&lt;dee_special.childNodes().at(i).toElement().text();</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!从指定节点中节获取name_show节点</span></span><br><span class="line"><span class="comment">            QDomElement name_show = db_config_xml.getDomElement(dee_special,"name_show");</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;name_show.childNodes().size();i++)</span></span><br><span class="line"><span class="comment">            {</span></span><br><span class="line"><span class="comment">                qDebug()&lt;&lt;name_show.childNodes().at(i).toElement().text()&lt;&lt;name_show.childNodes().at(i).toElement().attribute("language");</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!获取所有的DomElement</span></span><br><span class="line"><span class="comment">            QList&lt;QDomElement&gt; dlist  = db_config_xml.getDomElementList("item");</span></span><br><span class="line"><span class="comment">            qDebug()&lt;&lt;dlist.size();</span></span><br><span class="line"><span class="comment">            dee.setAttribute("type_test","liuyinggui");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!创建一个全新的QDomElement</span></span><br><span class="line"><span class="comment">            QDomElement addele = db_config_xml.createDomElement("mytest");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!设置属性</span></span><br><span class="line"><span class="comment">            addele.setAttribute("add_mytest","2022");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!设置值</span></span><br><span class="line"><span class="comment">            db_config_xml.setValue(addele,"0123456789");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            QDomNode pnode  = dee.parentNode();</span></span><br><span class="line"><span class="comment">            QDomNode p_pnode  = pnode.parentNode();</span></span><br><span class="line"><span class="comment">            qDebug()&lt;&lt;p_pnode.isNull();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //!设置到节点</span></span><br><span class="line"><span class="comment">            db_config_xml.setDomElement(addele,pnode);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //db_config_xml.setDomElement(addele,p_pnode);</span></span><br><span class="line"><span class="comment">            //db_config_xml.setDomElement(dee);</span></span><br><span class="line"><span class="comment">            db_config_xml.saveToFile();</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//!设置domele 下的值,需要确保domele下再无子节点，或者指定attrs后无多个节点，否则设置会出错</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setValue</span><span class="params">(QDomElement&amp;domele, <span class="type">const</span> QString&amp;value,</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs= QMap&lt;QString, QString&gt;())</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getDomElement 从parent 根据tagname 来获取QDomElement</span></span><br><span class="line"><span class="comment">     * @param parent</span></span><br><span class="line"><span class="comment">     * @param tagname 指定属性</span></span><br><span class="line"><span class="comment">     * @param attr</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @attention 注意如果有多个节点，默认只查找第一个。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">QDomElement <span class="title">getDomElement</span><span class="params">(<span class="type">const</span> QDomElement &amp;parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getDomElement 从整个XML文件根据tagname来获取QDomElement</span></span><br><span class="line"><span class="comment">     * @param tagname</span></span><br><span class="line"><span class="comment">     * @param attr 指定属性</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @attention 注意如果有多个节点，默认只查找第一个。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">QDomElement <span class="title">getDomElement</span><span class="params">(<span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//!先查看parent是否有对应的元素，如果没有，则创建一个</span></span><br><span class="line">    <span class="function">QDomElement <span class="title">getDomElementNoNull</span><span class="params">(QDomElement &amp;parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief getDomElementList 获取指定 tagname 和attr QDomElement</span></span><br><span class="line"><span class="comment">     * @param tagname</span></span><br><span class="line"><span class="comment">     * @param attr</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">QList&lt;QDomElement&gt; <span class="title">getDomElementList</span><span class="params">(<span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//!在parent 范围内查找符合要求的QDomElement</span></span><br><span class="line">    <span class="function">QList&lt;QDomElement&gt; <span class="title">getDomElementList</span><span class="params">(<span class="type">const</span> QDomElement &amp;parent,<span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief createDomElement</span></span><br><span class="line"><span class="comment">     * 用于创建一个空的QDomElement ，一般配合\ref setDomElement使用</span></span><br><span class="line"><span class="comment">     * @param tagName</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">QDomElement <span class="title">createDomElement</span><span class="params">(<span class="type">const</span> QString&amp;tagName)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief setDomElement 更新(替换)，增加(新) QDomElement ，更新的原则:tagname是否相同，属性是否相同</span></span><br><span class="line"><span class="comment">     * @param new_ele 新的元素</span></span><br><span class="line"><span class="comment">     * @param parent 父节点</span></span><br><span class="line"><span class="comment">     * @param attr 属性，如果不用关注属性，默认</span></span><br><span class="line"><span class="comment">     * @param append 是否在节点后面追加</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @attention  此函数不适用于有相同tagname的并列节点，如果有此类节点，不要使用此函数</span></span><br><span class="line"><span class="comment">     * 简单的方法是parent.appendchild(new_ele); 直接在父节点后增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setDomElement</span><span class="params">(QDomElement&amp;new_ele,QDomNode&amp; parent,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr=QMap&lt;QString,QString&gt;())</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief copyNode  拷贝源结点数据到目标结点</span></span><br><span class="line"><span class="comment">     * @param dstTag 目标结点数据</span></span><br><span class="line"><span class="comment">     * @param srcTag 源结点数据</span></span><br><span class="line"><span class="comment">     * @return  true，拷贝成功；false，拷贝失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">copyNode</span><span class="params">(QDomElement &amp;dstTag, QDomElement &amp;srcTag)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QDomElement <span class="title">findFirstElement</span><span class="params">(<span class="type">const</span> QString &amp;indexStr)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief hasNode  检查结点是否存在</span></span><br><span class="line"><span class="comment">     * @param indexStr 结点元素所在的路径，格式：string1|string2|string3；</span></span><br><span class="line"><span class="comment">     * @return  true，成功；false，结点元素不存在。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QDomDocument m_xml;</span><br><span class="line">    QMutex m_locker;</span><br><span class="line">    QString m_fileName;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// XMLPARSER_H</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"xmlParser.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"securityapi.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMutexLocker&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStringRef&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define START_AES_DECRYPT 1 //开启加密</span></span><br><span class="line"></span><br><span class="line">XmlParser::<span class="built_in">XmlParser</span>()</span><br><span class="line">    : <span class="built_in">m_fileName</span>(<span class="string">""</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XmlParser::~<span class="built_in">XmlParser</span>()</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">closeFile</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::open</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (fileName.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"file name:"</span> &lt;&lt; fileName &lt;&lt; <span class="string">"is empty!"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> QT_DEBUG</span></span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; "--------------------Xml parser open file:" &lt;&lt; fileName</span></span><br><span class="line"><span class="comment">//             &lt;&lt; "--------------------";</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    <span class="comment">// 将filename包装成一个File格式的文件</span></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="comment">// 以文本方式打开只读</span></span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QFile::ReadOnly | QFile::Text))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Open config file failed! err: "</span> + file.<span class="built_in">errorString</span>()&lt;&lt; fileName;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密、以及MD5校验处理；（注意需要先进行校验） TODO：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化_xml对象</span></span><br><span class="line">    m_xml.<span class="built_in">clear</span>();</span><br><span class="line">    QString error;</span><br><span class="line">    <span class="comment">// 判断是否读取XML文件成功</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> START_AES_DECRYPT</span></span><br><span class="line">    <span class="keyword">if</span> (!m_xml.<span class="built_in">setContent</span>(SecurityAPI::<span class="built_in">aesDecrypt</span>(file.<span class="built_in">readAll</span>()), <span class="literal">false</span>, &amp;error))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"Parse config file failed! err: "</span> + error;</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">int</span> errorLine = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> errorColumn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!m_xml.<span class="built_in">setContent</span>(&amp;file, <span class="literal">false</span>, &amp;error, &amp;errorLine, &amp;errorColumn))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"Parse config file failed! err: "</span> + error</span><br><span class="line">                 &lt;&lt; <span class="string">" error line: "</span> &lt;&lt; errorLine &lt;&lt; <span class="string">" error column: "</span> &lt;&lt; errorColumn</span><br><span class="line">                 &lt;&lt; <span class="string">" file name: "</span>&lt;&lt; fileName;</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新XML文件路径</span></span><br><span class="line">    m_fileName = fileName;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XmlParser::ifDnoExistCreate</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(QFile::<span class="built_in">exists</span>(fileName)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!file.<span class="built_in">open</span>(QFile::WriteOnly | QFile::Text))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    QDomDocument doc;</span><br><span class="line">    QDomProcessingInstruction instruction;</span><br><span class="line">    instruction=doc.<span class="built_in">createProcessingInstruction</span>(<span class="string">"xml"</span>,<span class="string">"version=\"1.0\" encoding=\"UTF-8\""</span>);</span><br><span class="line">    doc.<span class="built_in">appendChild</span>(instruction);</span><br><span class="line"></span><br><span class="line">    QDomElement root=doc.<span class="built_in">createElement</span>(<span class="string">"config"</span>);</span><br><span class="line">    doc.<span class="built_in">appendChild</span>(root);</span><br><span class="line"></span><br><span class="line">    QDomElement version = doc.<span class="built_in">createElement</span>(<span class="string">"version"</span>);</span><br><span class="line">    QDomText text;</span><br><span class="line">    text=doc.<span class="built_in">createTextNode</span>(<span class="string">"1.0"</span>);</span><br><span class="line">    version.<span class="built_in">appendChild</span>(text);</span><br><span class="line"></span><br><span class="line">    root.<span class="built_in">appendChild</span>(version);</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out_stream</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    doc.<span class="built_in">save</span>(out_stream,<span class="number">4</span>,QDomNode::EncodingFromDocument);</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::saveToFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">saveToFile</span>(m_fileName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::saveToFile</span><span class="params">(<span class="type">const</span> QString &amp;fileName)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (m_xml.<span class="built_in">isNull</span>() || fileName.<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> START_AES_DECRYPT            <span class="comment">// 加密功能</span></span></span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QFile::ReadWrite | QFile::Truncate))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"save to"</span></span><br><span class="line">                 &lt;&lt; fileName &lt;&lt;<span class="string">"failed:"</span> &lt;&lt; file.<span class="built_in">errorString</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    QByteArray encryptContent = SecurityAPI::<span class="built_in">aesEncrypt</span>(m_xml.<span class="built_in">toByteArray</span>());</span><br><span class="line">    file.<span class="built_in">resize</span>(<span class="number">0</span>);     <span class="comment">//清空原有文件内容</span></span><br><span class="line">    file.<span class="built_in">write</span>(encryptContent, encryptContent.<span class="built_in">size</span>());</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QFile::WriteOnly | QFile::Text))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; <span class="string">"save to"</span></span><br><span class="line">                 &lt;&lt; fileName &lt;&lt;<span class="string">"failed:"</span> &lt;&lt; file.<span class="built_in">errorString</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密文件、以及增加MD5校验 TODO：</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">write</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    m_xml.<span class="built_in">save</span>(write, <span class="number">4</span>, QDomNode::EncodingFromDocument);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XmlParser::closeFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(m_fileName)</span></span>;</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::hasNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">findFirstElement</span>(indexStr).<span class="built_in">isNull</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::getNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QDomElement &amp;tag)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">hasNode</span>(indexStr))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::setNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QDomElement &amp;srcTag)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line"></span><br><span class="line">    QDomElement dstTag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">copyNode</span>(dstTag, srcTag);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::addNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;tagName,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="type">const</span> QString &amp;value, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line"></span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    QDomElement newTag = m_xml.<span class="built_in">createElement</span>(tagName);</span><br><span class="line">    <span class="comment">// 设置结点属性</span></span><br><span class="line">    QMap&lt;QString, QString&gt;::ConstIterator iters;</span><br><span class="line">    <span class="keyword">for</span> (iters = attrs.<span class="built_in">constBegin</span>(); iters != attrs.<span class="built_in">constEnd</span>(); ++iters)</span><br><span class="line">    {</span><br><span class="line">        newTag.<span class="built_in">setAttribute</span>(iters.<span class="built_in">key</span>(), iters.<span class="built_in">value</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父结点增加子结点</span></span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">appendChild</span>(newTag).<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增的结点创建值结点，并设置值数据。</span></span><br><span class="line">    <span class="keyword">return</span> !newTag.<span class="built_in">appendChild</span>(m_xml.<span class="built_in">createTextNode</span>(value)).<span class="built_in">isNull</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::removeNode</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (!tag.<span class="built_in">isNull</span>() &amp;&amp; !tag.<span class="built_in">parentNode</span>().<span class="built_in">isNull</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (attrs.<span class="built_in">isEmpty</span>())</span><br><span class="line">        {</span><br><span class="line">            QDomNode node = tag.<span class="built_in">parentNode</span>().<span class="built_in">removeChild</span>(tag);</span><br><span class="line">            <span class="keyword">return</span> !node.<span class="built_in">isNull</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> tag_count = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag_count; ++i)</span><br><span class="line">        {</span><br><span class="line">            QDomElement child_tag = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">            <span class="type">bool</span> same_attr = <span class="literal">true</span>;</span><br><span class="line">            QMap&lt;QString, QString&gt;::ConstIterator iters;</span><br><span class="line">            <span class="keyword">for</span> (iters = attrs.<span class="built_in">constBegin</span>(); iters != attrs.<span class="built_in">constEnd</span>(); ++iters)</span><br><span class="line">            {</span><br><span class="line">                same_attr &amp;= (child_tag.<span class="built_in">attribute</span>(iters.<span class="built_in">key</span>()) == iters.<span class="built_in">value</span>());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (same_attr)</span><br><span class="line">            {</span><br><span class="line">                QDomNode node = tag.<span class="built_in">parentNode</span>().<span class="built_in">removeChild</span>(child_tag);</span><br><span class="line">                <span class="keyword">return</span> !node.<span class="built_in">isNull</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::setValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;value, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line"></span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性为空，设置首个结点的值</span></span><br><span class="line">    <span class="keyword">if</span> (attrs.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        QDomText domText = tag.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>();</span><br><span class="line">        <span class="keyword">if</span> (!domText.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            domText.<span class="built_in">setData</span>(value);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 节点没有内容时，新增一个结点</span></span><br><span class="line">            tag.<span class="built_in">appendChild</span>(m_xml.<span class="built_in">createTextNode</span>(value));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性不为空，设置匹配结点属性的值</span></span><br><span class="line">    <span class="type">int</span> tag_count = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag_count; ++i)</span><br><span class="line">    {</span><br><span class="line">        QDomElement child_tag = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="type">bool</span> same_attr = <span class="literal">true</span>;</span><br><span class="line">        QMap&lt;QString, QString&gt;::ConstIterator iters;</span><br><span class="line">        <span class="comment">// 判断结点属性是否一致</span></span><br><span class="line">        <span class="keyword">for</span> (iters = attrs.<span class="built_in">constBegin</span>(); iters != attrs.<span class="built_in">constEnd</span>(); ++iters)</span><br><span class="line">        {</span><br><span class="line">            same_attr &amp;= (child_tag.<span class="built_in">attribute</span>(iters.<span class="built_in">key</span>()) == iters.<span class="built_in">value</span>());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (same_attr)</span><br><span class="line">        {</span><br><span class="line">            QDomText domText = child_tag.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>();</span><br><span class="line">            <span class="keyword">if</span> (!domText.<span class="built_in">isNull</span>())</span><br><span class="line">            {</span><br><span class="line">                domText.<span class="built_in">setData</span>(value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 节点没有内容时，新增一个结点</span></span><br><span class="line">                child_tag.<span class="built_in">appendChild</span>(m_xml.<span class="built_in">createTextNode</span>(value));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 未找到匹配属性的结点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::setValue</span><span class="params">(QDomElement&amp;domele,<span class="type">const</span> QString&amp;value,<span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomElement&amp; tag = domele;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性为空，设置首个结点的值</span></span><br><span class="line">    <span class="keyword">if</span> (attrs.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        QDomText domText = tag.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!domText.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            domText.<span class="built_in">setData</span>(value);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 节点没有内容时，新增一个结点</span></span><br><span class="line">            tag.<span class="built_in">appendChild</span>(m_xml.<span class="built_in">createTextNode</span>(value));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性不为空，设置匹配结点属性的值</span></span><br><span class="line">    <span class="type">int</span> tag_count = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag_count; ++i)</span><br><span class="line">    {</span><br><span class="line">        QDomElement child_tag = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="type">bool</span> same_attr = <span class="literal">true</span>;</span><br><span class="line">        QMap&lt;QString, QString&gt;::ConstIterator iters;</span><br><span class="line">        <span class="comment">// 判断结点属性是否一致</span></span><br><span class="line">        <span class="keyword">for</span> (iters = attrs.<span class="built_in">constBegin</span>(); iters != attrs.<span class="built_in">constEnd</span>(); ++iters)</span><br><span class="line">        {</span><br><span class="line">            same_attr &amp;= (child_tag.<span class="built_in">attribute</span>(iters.<span class="built_in">key</span>()) == iters.<span class="built_in">value</span>());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (same_attr)</span><br><span class="line">        {</span><br><span class="line">            QDomText domText = child_tag.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>();</span><br><span class="line">            <span class="keyword">if</span> (!domText.<span class="built_in">isNull</span>())</span><br><span class="line">            {</span><br><span class="line">                domText.<span class="built_in">setData</span>(value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 节点没有内容时，新增一个结点</span></span><br><span class="line">                child_tag.<span class="built_in">appendChild</span>(m_xml.<span class="built_in">createTextNode</span>(value));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 未找到匹配属性的结点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::getValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QString &amp;value, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性为空，获取首个结点的值</span></span><br><span class="line">    <span class="keyword">if</span> (attrs.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        value = tag.<span class="built_in">text</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点属性不为空，获取匹配结点属性的值</span></span><br><span class="line">    <span class="type">int</span> tag_count = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag_count; ++i)</span><br><span class="line">    {</span><br><span class="line">        QDomElement child_tag = tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="type">bool</span> same_attr = <span class="literal">true</span>;</span><br><span class="line">        QMap&lt;QString, QString&gt;::ConstIterator iters;</span><br><span class="line">        <span class="comment">// 判断结点属性是否一致</span></span><br><span class="line">        <span class="keyword">for</span> (iters = attrs.<span class="built_in">constBegin</span>(); iters != attrs.<span class="built_in">constEnd</span>(); ++iters)</span><br><span class="line">        {</span><br><span class="line">            same_attr &amp;= (child_tag.<span class="built_in">attribute</span>(iters.<span class="built_in">key</span>()) == iters.<span class="built_in">value</span>());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (same_attr)</span><br><span class="line">        {</span><br><span class="line">            value = child_tag.<span class="built_in">text</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 未找到匹配属性的结点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::getValue</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, QStringList &amp;valueList)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>() || tag.<span class="built_in">parentNode</span>().<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        valueList.<span class="built_in">append</span>(tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>().<span class="built_in">text</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::setAttr</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, <span class="type">const</span> QString &amp;value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (!tag.<span class="built_in">isNull</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (tag.<span class="built_in">hasAttribute</span>(attr))</span><br><span class="line">        {</span><br><span class="line">            tag.<span class="built_in">setAttribute</span>(attr, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::getAttr</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, QString &amp;value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (!tag.<span class="built_in">isNull</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (tag.<span class="built_in">hasAttribute</span>(attr))</span><br><span class="line">        {</span><br><span class="line">            value = tag.<span class="built_in">attribute</span>(attr);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    value = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::getAttrs</span><span class="params">(<span class="type">const</span> QString &amp;indexStr, <span class="type">const</span> QString &amp;attr, QStringList &amp;valueList)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;m_locker)</span></span>;</span><br><span class="line">    QDomElement tag = <span class="built_in">findFirstElement</span>(indexStr);</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>() || tag.<span class="built_in">parentNode</span>().<span class="built_in">isNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">count</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        valueList.<span class="built_in">append</span>(tag.<span class="built_in">parentNode</span>().<span class="built_in">childNodes</span>().<span class="built_in">at</span>(i).<span class="built_in">toElement</span>().<span class="built_in">attribute</span>(attr));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">QDomElement <span class="title">XmlParser::getDomElement</span><span class="params">(<span class="type">const</span> QDomElement&amp; parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomElement de;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="built_in">isNull</span>())  <span class="keyword">return</span> de;</span><br><span class="line"></span><br><span class="line">    QDomNodeList list = parent.<span class="built_in">elementsByTagName</span>(tagname);</span><br><span class="line">    QStringList keys = attr.<span class="built_in">keys</span>();</span><br><span class="line">    QString attr_str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        de = list.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="keyword">if</span> (de.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        foreach(<span class="type">const</span> QString&amp;key,keys)</span><br><span class="line">        {</span><br><span class="line">            attr_str = de.<span class="built_in">attribute</span>(key);</span><br><span class="line">            <span class="keyword">if</span>( attr[key] == attr_str )</span><br><span class="line">            {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>( keys.<span class="built_in">size</span>() == count )</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//返回第一次找到的那个</span></span><br><span class="line">            <span class="keyword">return</span> de;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QDomElement</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">QDomElement <span class="title">XmlParser::getDomElement</span><span class="params">(<span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomElement de;</span><br><span class="line">    <span class="keyword">if</span>(m_xml.<span class="built_in">isNull</span>())  <span class="keyword">return</span> de;</span><br><span class="line"></span><br><span class="line">    QDomNodeList list = m_xml.<span class="built_in">elementsByTagName</span>(tagname);</span><br><span class="line">    QStringList keys = attr.<span class="built_in">keys</span>();</span><br><span class="line">    QString attr_str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        de = list.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="keyword">if</span> (de.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        foreach(<span class="type">const</span> QString&amp;key,keys)</span><br><span class="line">        {</span><br><span class="line">            attr_str = de.<span class="built_in">attribute</span>(key);</span><br><span class="line">            <span class="keyword">if</span>( attr[key] == attr_str )</span><br><span class="line">            {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>( keys.<span class="built_in">size</span>() == count )</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//返回第一次找到的那个</span></span><br><span class="line">            <span class="keyword">return</span> de;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QDomElement</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">QDomElement <span class="title">XmlParser::getDomElementNoNull</span><span class="params">(QDomElement &amp;parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomElement dom = <span class="built_in">getDomElement</span>(parent,tagname,attr);</span><br><span class="line">    <span class="keyword">if</span>(dom.<span class="built_in">isNull</span>())</span><br><span class="line">    {</span><br><span class="line">        dom = <span class="built_in">createDomElement</span>(tagname);</span><br><span class="line">        <span class="keyword">if</span> (!attr.<span class="built_in">isEmpty</span>())</span><br><span class="line">        {</span><br><span class="line">            QMap&lt;QString, QString&gt;::ConstIterator iter = attr.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">for</span> (; iter != attr.<span class="built_in">end</span>(); ++iter)</span><br><span class="line">            {</span><br><span class="line">                dom.<span class="built_in">setAttribute</span>(iter.<span class="built_in">key</span>(), iter.<span class="built_in">value</span>());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        parent.<span class="built_in">appendChild</span>(dom);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">QList&lt;QDomElement&gt; _getDomElementList(<span class="type">const</span> T &amp;parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span><br><span class="line">{</span><br><span class="line">    QList&lt;QDomElement&gt; delist;</span><br><span class="line">    QDomElement de;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="built_in">isNull</span>())  <span class="keyword">return</span> delist;</span><br><span class="line"></span><br><span class="line">    QDomNodeList list = parent.<span class="built_in">elementsByTagName</span>(tagname);</span><br><span class="line">    QStringList keys = attr.<span class="built_in">keys</span>();</span><br><span class="line">    QString attr_str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        de = list.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="keyword">if</span> (de.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(keys.<span class="built_in">isEmpty</span>())</span><br><span class="line">        {</span><br><span class="line">            delist.<span class="built_in">append</span>(de);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        foreach(<span class="type">const</span> QString&amp;key,keys)</span><br><span class="line">        {</span><br><span class="line">            attr_str = de.<span class="built_in">attribute</span>(key);</span><br><span class="line">            <span class="keyword">if</span>( attr[key] == attr_str )</span><br><span class="line">            {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>( keys.<span class="built_in">size</span>() == count )</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//返回第一次找到的那个</span></span><br><span class="line">            delist.<span class="built_in">append</span>(de);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> delist;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">QList&lt;QDomElement&gt; <span class="title">XmlParser::getDomElementList</span><span class="params">(<span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> _getDomElementList(m_xml,tagname,attr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">QList&lt;QDomElement&gt; <span class="title">XmlParser::getDomElementList</span><span class="params">(<span class="type">const</span> QDomElement &amp;parent, <span class="type">const</span> QString &amp;tagname, <span class="type">const</span> QMap&lt;QString, QString&gt; &amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> _getDomElementList(parent,tagname,attr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">QDomElement <span class="title">XmlParser::createDomElement</span><span class="params">(<span class="type">const</span> QString&amp;tagName)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> m_xml.<span class="built_in">createElement</span>(tagName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::setDomElement</span><span class="params">(QDomElement &amp;new_ele, QDomNode &amp;parent,<span class="type">const</span> QMap&lt;QString,QString&gt;&amp;attr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(parent.<span class="built_in">isNull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(new_ele.<span class="built_in">isNull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//查找相同的tag</span></span><br><span class="line">    QDomNodeList nlist = parent.<span class="built_in">toElement</span>().<span class="built_in">childNodes</span>();</span><br><span class="line">    <span class="type">bool</span> operatorOne=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(attr.<span class="built_in">isEmpty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nlist.<span class="built_in">size</span>();i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(nlist.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>().<span class="built_in">tagName</span>() == new_ele.<span class="built_in">tagName</span>())</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(!operatorOne)</span><br><span class="line">                {</span><br><span class="line">                    parent.<span class="built_in">replaceChild</span>(new_ele,nlist.<span class="built_in">at</span>(i));</span><br><span class="line">                    operatorOne = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    parent.<span class="built_in">removeChild</span>(nlist.<span class="built_in">at</span>(i));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(!operatorOne)</span><br><span class="line">        {</span><br><span class="line">            operatorOne = <span class="literal">true</span>;</span><br><span class="line">            parent.<span class="built_in">appendChild</span>(new_ele);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nlist.<span class="built_in">size</span>();i++)</span><br><span class="line">        {</span><br><span class="line">            QDomElement de= nlist.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">            <span class="keyword">if</span>(de.<span class="built_in">tagName</span>() != new_ele.<span class="built_in">tagName</span>() ) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            QStringList keys = attr.<span class="built_in">keys</span>();</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            foreach(<span class="type">const</span> QString&amp;key,attr.<span class="built_in">keys</span>())</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>( de.<span class="built_in">attribute</span>(key) == attr[key] )</span><br><span class="line">                    count++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(count &amp;&amp; count == keys.<span class="built_in">size</span>())</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(!operatorOne)</span><br><span class="line">                {</span><br><span class="line">                    parent.<span class="built_in">replaceChild</span>(new_ele,nlist.<span class="built_in">at</span>(i));</span><br><span class="line">                    operatorOne = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    parent.<span class="built_in">removeChild</span>(nlist.<span class="built_in">at</span>(i));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//!没有符合条件的项数据，在后面append</span></span><br><span class="line">        <span class="keyword">if</span>(!operatorOne)</span><br><span class="line">        {</span><br><span class="line">            operatorOne = <span class="literal">true</span>;</span><br><span class="line">            parent.<span class="built_in">appendChild</span>(new_ele);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XmlParser::copyNode</span><span class="params">(QDomElement &amp;dstTag, QDomElement &amp;srcTag)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomNodeList dstList = dstTag.<span class="built_in">childNodes</span>();</span><br><span class="line">    QDomNodeList srcList = srcTag.<span class="built_in">childNodes</span>();</span><br><span class="line">    <span class="keyword">if</span> (dstList.<span class="built_in">count</span>() != srcList.<span class="built_in">count</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    QDomElement dstTag1, srcTag1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dstList.<span class="built_in">count</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        dstTag1 = dstList.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        srcTag1 = srcList.<span class="built_in">at</span>(i).<span class="built_in">toElement</span>();</span><br><span class="line">        <span class="type">bool</span> dstTag1HasChile = dstTag1.<span class="built_in">hasChildNodes</span>();</span><br><span class="line">        <span class="type">bool</span> srcTag1HasChile = srcTag1.<span class="built_in">hasChildNodes</span>();</span><br><span class="line">        <span class="keyword">if</span> (dstTag1HasChile &amp;&amp; srcTag1HasChile)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (dstTag1.<span class="built_in">hasAttributes</span>())</span><br><span class="line">            {</span><br><span class="line">                QDomNamedNodeMap map = srcTag1.<span class="built_in">attributes</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; map.<span class="built_in">count</span>(); ++i)</span><br><span class="line">                {</span><br><span class="line">                    dstTag1.<span class="built_in">setAttribute</span>(map.<span class="built_in">item</span>(j).<span class="built_in">nodeName</span>(), map.<span class="built_in">item</span>(j).<span class="built_in">nodeValue</span>());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            QDomText domText = dstTag1.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>();</span><br><span class="line">            <span class="keyword">if</span> (!domText.<span class="built_in">isNull</span>())</span><br><span class="line">            {</span><br><span class="line">                domText.<span class="built_in">setData</span>(srcTag1.<span class="built_in">text</span>());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="built_in">copyNode</span>(dstTag1, srcTag1);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dstTag1HasChile)</span><br><span class="line">        {</span><br><span class="line">            dstTag1.<span class="built_in">firstChild</span>().<span class="built_in">toText</span>().<span class="built_in">setData</span>(<span class="built_in">QString</span>());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">QDomElement <span class="title">XmlParser::findFirstElement</span><span class="params">(<span class="type">const</span> QString &amp;indexStr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QDomElement tag;</span><br><span class="line">    <span class="keyword">if</span> (m_xml.<span class="built_in">isNull</span>())  <span class="keyword">return</span> tag;</span><br><span class="line"></span><br><span class="line">    QStringList list = indexStr.<span class="built_in">split</span>(<span class="string">"|"</span>, QString::SkipEmptyParts);</span><br><span class="line">    <span class="keyword">if</span> (list.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> tag;</span><br><span class="line"></span><br><span class="line">    tag = m_xml.<span class="built_in">firstChildElement</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (tag.<span class="built_in">isNull</span>())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> tag;</span><br><span class="line">        }</span><br><span class="line">        tag = tag.<span class="built_in">firstChildElement</span>(list.<span class="built_in">at</span>(i));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> tag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>接口未实现“命名空间”；</li><li>接口未实现“xml文档类型设置”；</li></ol></blockquote>]]></content>
    
    
    <summary type="html">其余QT的XML解析接口</summary>
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    <category term="QDomDocument" scheme="https://ouyujia.github.io/categories/QT/QDomDocument/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
    <category term="XML" scheme="https://ouyujia.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>QT串口通讯错误码解析</title>
    <link href="https://ouyujia.github.io/2023/05/01/QT%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF%E9%94%99%E8%AF%AF%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://ouyujia.github.io/2023/05/01/QT%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF%E9%94%99%E8%AF%AF%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-05-01T08:43:26.000Z</published>
    <updated>2023-11-24T02:39:34.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目使用qt串口接口QSerialPort进行串口通讯，生产反馈产品提示串口通讯异常，查看log发现有3个错误码</p><p>分别是PermissionError(2)、WriteError(7)、UnknownError(11)。后面分析日志、了解生产情况找到了问题点。</p><blockquote><ul><li>PermissionError原因：串口占用，生产电脑上面先跑了串口调试工具导致串口打开失败</li><li>WriteError及UnknownError原因：（这连个错误是同时出现的额，先报WriteError后面紧跟UnknownError）通过对比日志发现是Windows自动睡眠后再次唤醒出现的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682670665137.png" alt="1682670665137"></p></blockquote><h3 id="QT串口通讯错误码及机翻"><a href="#QT串口通讯错误码及机翻" class="headerlink" title="QT串口通讯错误码及机翻"></a>QT串口通讯错误码及机翻</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">SerialPortError</span> {</span><br><span class="line">        NoError, <span class="comment">// 没有错误</span></span><br><span class="line">    </span><br><span class="line">        DeviceNotFoundError,<span class="comment">// 试图打开不存在的设备时发生错误。</span></span><br><span class="line">    </span><br><span class="line">        PermissionError,<span class="comment">// 1、试图打开另一个进程已打开的设备时</span></span><br><span class="line">    <span class="comment">// 2、用户没有足够的权限和凭据打开时发生错误。</span></span><br><span class="line">    </span><br><span class="line">        OpenError,<span class="comment">// 试图打开本进程中已打开的设备时发生错误。</span></span><br><span class="line">    </span><br><span class="line">        ParityError,<span class="comment">// 读取数据时，硬件检测到奇偶校验错误。</span></span><br><span class="line">    <span class="comment">// 这个值已经过时了。我们强烈建议不要在新代码中使用它。</span></span><br><span class="line">    </span><br><span class="line">        FramingError,<span class="comment">// 读取数据时硬件检测到帧错误。</span></span><br><span class="line">    <span class="comment">// 这个值已经过时了。我们强烈建议不要在新代码中使用它。</span></span><br><span class="line">    </span><br><span class="line">        BreakConditionError,<span class="comment">// 硬件在输入线上检测到断路情况。</span></span><br><span class="line">    <span class="comment">// 这个值已经过时了。我们强烈建议不要在新代码中使用它。</span></span><br><span class="line">    </span><br><span class="line">        WriteError,<span class="comment">// 写入数据时发生I/O错误。</span></span><br><span class="line">    </span><br><span class="line">        ReadError,<span class="comment">// 读取数据时发生I/O错误。</span></span><br><span class="line">    </span><br><span class="line">        ResourceError,<span class="comment">// 当资源不可用时发生I/O错误，例如当设备意外地从系统中移除时。</span></span><br><span class="line">    </span><br><span class="line">        UnsupportedOperationError, <span class="comment">//当前操作系统不支持或不禁止所请求的设备操作。</span></span><br><span class="line">    </span><br><span class="line">        UnknownError,<span class="comment">// 发生了一个无法识别的错误。</span></span><br><span class="line">    </span><br><span class="line">        TimeoutError,<span class="comment">// 发生超时错误。这个值是在QtSerialPort 5.2中引入的。</span></span><br><span class="line">    </span><br><span class="line">        NotOpenError<span class="comment">// 当执行的操作只有在设备打开的情况下才能成功执行时，会发生此错误。</span></span><br><span class="line">            <span class="comment">// 这个值是在QtSerialPort 5.2中引入的。</span></span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure><h3 id="串口错误码处理"><a href="#串口错误码处理" class="headerlink" title="串口错误码处理"></a>串口错误码处理</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">m_uart = <span class="keyword">new</span> <span class="built_in">QSerialPort</span>();  <span class="comment">//不能指定父对象</span></span><br><span class="line"><span class="comment">//! 连接串口通信错误信号</span></span><br><span class="line"><span class="built_in">connect</span>(m_uart, <span class="built_in">SIGNAL</span>(<span class="built_in">errorOccurred</span>(QSerialPort::SerialPortError)), <span class="keyword">this</span>,</span><br><span class="line">        <span class="built_in">SLOT</span>(<span class="built_in">errorFunc</span>(QSerialPort::SerialPortError)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//! 串口通信错误吗处理接口 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UartPortThread::errorFunc</span><span class="params">(QSerialPort::SerialPortError error)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (error != QSerialPort::NoError &amp;&amp; error != QSerialPort::TimeoutError</span><br><span class="line">            &amp;&amp; error != QSerialPort::NotOpenError &amp;&amp; error !=      QSerialPort::DeviceNotFoundError)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO &lt;&lt; QString::<span class="built_in">number</span>(error) &lt;&lt; <span class="string">"error...."</span>;</span><br><span class="line">        m_needReconnect = <span class="literal">true</span>;</span><br><span class="line">        <span class="function">emit <span class="title">uartConnectState</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">setPortName</span>(<span class="string">""</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;项目使用qt串口接口QSerialPort进行串口通讯，生产反馈产品提示串口通讯异常，查看log发现有3个错误码&lt;/p&gt;
&lt;p&gt;分别是Per</summary>
      
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    <category term="QSerialPort" scheme="https://ouyujia.github.io/categories/QT/QSerialPort/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
    <category term="串口" scheme="https://ouyujia.github.io/tags/%E4%B8%B2%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>QT自定义log系统</title>
    <link href="https://ouyujia.github.io/2023/04/29/QT%E8%87%AA%E5%AE%9A%E4%B9%89log%E7%B3%BB%E7%BB%9F/"/>
    <id>https://ouyujia.github.io/2023/04/29/QT%E8%87%AA%E5%AE%9A%E4%B9%89log%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-04-29T11:51:29.000Z</published>
    <updated>2023-05-04T02:56:58.543Z</updated>
    
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>QT使用MingW编译器添加Dump调试功能</title>
    <link href="https://ouyujia.github.io/2023/04/28/QTMingW%E6%B7%BBDump%E5%8A%9F%E8%83%BD/"/>
    <id>https://ouyujia.github.io/2023/04/28/QTMingW%E6%B7%BBDump%E5%8A%9F%E8%83%BD/</id>
    <published>2023-04-28T08:43:26.000Z</published>
    <updated>2023-11-24T02:37:39.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近因为维护的项目出现崩溃，客户现场的log无法定位，因此需要使用dump文件调试于是查找资料添加了一个崩溃生成dump文件功能</p></blockquote><hr><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>Qt5.12.9-MingW版本/Qt5.5.1-MingW版本，Visual Studio 2017/Visual Studio 2013，Windows系统</p></blockquote><hr><h2 id="配置pro文件，在exe文件加入调试信息"><a href="#配置pro文件，在exe文件加入调试信息" class="headerlink" title="配置pro文件，在exe文件加入调试信息"></a>配置pro文件，在exe文件加入调试信息</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QMAKE_CFLAGS_RELEASE += -g</span><br><span class="line">QMAKE_CXXFLAGS_RELEASE += -g</span><br><span class="line">#禁止优化</span><br><span class="line">QMAKE_CFLAGS_RELEASE -= -O2</span><br><span class="line">QMAKE_CXXFLAGS_RELEASE -= -O2</span><br><span class="line">QMAKE_LFLAGS_RELEASE = -mthreads -W</span><br><span class="line">#生成dump文件需要</span><br><span class="line">LIBS += -lDbgHelp</span><br><span class="line">#加上下面两行，否则用vs调试时，提示“未找到xxx.exe<span class="string">"</span></span><br><span class="line"><span class="string">QMAKE_CXXFLAGS += -g</span></span><br><span class="line"><span class="string">QMAKE_CFLAGS += -g</span></span><br></pre></td></tr></tbody></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qdebug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QVector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dbghelp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="comment">//! 异常处理回调（崩溃时自动调用）</span></span><br><span class="line"><span class="function"><span class="type">static</span> LONG WINAPI <span class="title">exceptionCallback</span><span class="params">(<span class="keyword">struct</span> _EXCEPTION_POINTERS* exceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QCoreApplication *app = QApplication::<span class="built_in">instance</span>();</span><br><span class="line"></span><br><span class="line">    QString savePath = app-&gt;<span class="built_in">applicationDirPath</span>() + <span class="string">"dump/"</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"save path :"</span>&lt;&lt;savePath;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(savePath)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!dir.<span class="built_in">exists</span>() &amp;&amp; !dir.<span class="built_in">mkpath</span>(savePath)) {</span><br><span class="line">        app-&gt;<span class="built_in">exit</span>(E_UNEXPECTED);</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    savePath.<span class="built_in">append</span>(<span class="string">"assit_"</span>);</span><br><span class="line">    savePath.<span class="built_in">append</span>(QDateTime::<span class="built_in">currentDateTime</span>().<span class="built_in">toString</span>(<span class="string">"yyyyMMddhhmmsszzz"</span>));</span><br><span class="line">    savePath.<span class="built_in">append</span>(<span class="string">".dmp"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建dump文件</span></span><br><span class="line">    HANDLE dump = <span class="built_in">CreateFileW</span>(savePath.<span class="built_in">toStdWString</span>().<span class="built_in">c_str</span>(), GENERIC_WRITE,</span><br><span class="line">        <span class="number">0</span>, <span class="literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (INVALID_HANDLE_VALUE == dump) {</span><br><span class="line">        app-&gt;<span class="built_in">exit</span>(E_UNEXPECTED);</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    MINIDUMP_EXCEPTION_INFORMATION miniDumpExceptionInfo;</span><br><span class="line">    miniDumpExceptionInfo.ExceptionPointers = exceptionInfo;</span><br><span class="line">    miniDumpExceptionInfo.ThreadId = <span class="built_in">GetCurrentThreadId</span>();</span><br><span class="line">    miniDumpExceptionInfo.ClientPointers = TRUE;</span><br><span class="line">    DWORD idProcess = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将崩溃信息写入dump文件中</span></span><br><span class="line">    <span class="built_in">MiniDumpWriteDump</span>(<span class="built_in">GetCurrentProcess</span>(), idProcess, dump,</span><br><span class="line">        MiniDumpNormal, &amp;miniDumpExceptionInfo, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(dump);</span><br><span class="line"></span><br><span class="line">    app-&gt;<span class="built_in">exit</span>(E_UNEXPECTED);</span><br><span class="line">    <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//! 空指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">crashNullPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//空指针测试</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span>* p_a = (<span class="type">int</span>*)(<span class="literal">NULL</span>); *p_a = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! 悬浮指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">crashFloatPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span>* p_a = &amp;a;</span><br><span class="line">    <span class="keyword">delete</span> p_a;</span><br><span class="line">    *p_a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"*p_a :"</span>&lt;&lt; *p_a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! 野指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">crashWildPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span>* p_a;</span><br><span class="line">    *p_a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"*p_a :"</span>&lt;&lt; *p_a;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! array越界</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ArrayExceed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">2</span>] = {<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr[i]"</span>&lt;&lt; arr[i];</span><br><span class="line">    }</span><br><span class="line">    arr[<span class="number">1000</span>] = <span class="number">11111</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr[10000]"</span>&lt;&lt; arr[<span class="number">10000</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Vector越界</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VectorExceed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QVector&lt;<span class="type">int</span>&gt; vec = {<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        value = vec.<span class="built_in">at</span>(i);</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr.at(i)"</span>&lt;&lt; value;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr[10000]"</span>&lt;&lt; vec.<span class="built_in">at</span>(<span class="number">10000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Vector越界</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VectorExceed2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QVector&lt;<span class="type">int</span>&gt; vec = {<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        vec[i] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr[i]"</span>&lt;&lt; vec[i];</span><br><span class="line">    }</span><br><span class="line">    vec[<span class="number">1000</span>] = <span class="number">11111</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">"arr[10000]"</span>&lt;&lt; vec[<span class="number">10000</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! list越界</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListExceed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QList&lt;<span class="type">int</span>&gt; list = {<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    list[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Map</span></span><br><span class="line"><span class="comment">//void MapExceed()</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//    QMap&lt;int, QString&gt; map;</span></span><br><span class="line"><span class="comment">//    map.insert(0, "frist");</span></span><br><span class="line"><span class="comment">//    map.insert(1, "second");</span></span><br><span class="line"><span class="comment">//    map.remove(3);</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    <span class="comment">//! 注册异常奔溃回调</span></span><br><span class="line">    <span class="built_in">SetUnhandledExceptionFilter</span>(exceptionCallback);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//测试接口</span></span><br><span class="line"><span class="comment">//    crashNullPtr();</span></span><br><span class="line"><span class="comment">//    crashFloatPtr();</span></span><br><span class="line"><span class="comment">//    crashWildPtr();</span></span><br><span class="line"><span class="comment">//    ArrayExceed();</span></span><br><span class="line">    <span class="built_in">VectorExceed</span>();</span><br><span class="line"><span class="comment">//    VectorExceed2();</span></span><br><span class="line"><span class="comment">//    ListExceed();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="生成pdb文件"><a href="#生成pdb文件" class="headerlink" title="生成pdb文件"></a>生成pdb文件</h2><blockquote><p>注：WingW编译器并不会像MSVC一样自动生成pdb文件需要使用第三方工具生成。这里使用github开源工具<strong>cv2pdb.exe</strong>生成。</p></blockquote><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><p><a href="https://github.com/rainers/cv2pdb">下载链接</a></p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682242797578.png" alt="1682242797578"></p><p>下载下来使用vs2017编译源码的到cv2pdb.exe文件。</p><h3 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h3><blockquote><p>使用命令行(cmd)</p><ol><li>打开命令行，cd到cv2pdb.exe文件路径下</li><li>执行指令 “cv2pdb.exe  xxx.exe”即可在xxx.exe同级路径下生成xxx.pdb文件</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682243028125.png" alt="1682243028125"></p><h3 id="出现错误："><a href="#出现错误：" class="headerlink" title="出现错误："></a>出现错误：</h3><blockquote><p><strong>qBreakpadTest.pdb: cannot load PDB helper DLL</strong></p></blockquote><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p><strong>错误原因：电脑没有安装Visual Studio环境</strong></p><blockquote><p>安装Visual Studio即可解决</p></blockquote><hr><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><hr><h3 id="使用Visual-Studio-IDE调试（推荐）"><a href="#使用Visual-Studio-IDE调试（推荐）" class="headerlink" title="使用Visual Studio IDE调试（推荐）"></a>使用Visual Studio IDE调试（推荐）</h3><h4 id="加载pdb文件"><a href="#加载pdb文件" class="headerlink" title="加载pdb文件"></a>加载pdb文件</h4><blockquote><p>使用Visual Studio打开需要调试的pdb文件(将exe文件和pdb放到同一目录下，然后设置符合路径)</p></blockquote><hr><h4 id="设置调试pdb目录位置"><a href="#设置调试pdb目录位置" class="headerlink" title="设置调试pdb目录位置"></a>设置调试pdb目录位置</h4><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682243563126.png" alt="1682243563126"></p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682243641185.png" alt="1682243641185"></p><hr><h4 id="设置源码目录"><a href="#设置源码目录" class="headerlink" title="设置源码目录"></a>设置源码目录</h4><p>在解决方案-属性，打开弹窗设置</p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682243771250.png" alt="1682243771250"></p><h4 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h4><blockquote><p>点击 “使用 仅限本机 进行调试”</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682243822104.png" alt="1682243822104"></p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/kk_image.jpg" alt="img"></p><hr><h3 id="使用Windows调试器windbg-exe调试"><a href="#使用Windows调试器windbg-exe调试" class="headerlink" title="使用Windows调试器windbg.exe调试"></a>使用Windows调试器windbg.exe调试</h3><blockquote><p><a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-sdk/">下载链接</a></p><p>此链接是下载Windows SDK安装包的，Windows SDK安装包含windbg.exe。</p></blockquote><h4 id="调试步骤"><a href="#调试步骤" class="headerlink" title="调试步骤"></a>调试步骤</h4><blockquote><ol><li>双击打开windbg.exe，选择相应版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682405908877.png" alt="1682405865975"></p><ol start="2"><li>依次完成如下配置<br>打开File 需要完成 Symbol File Path 、Source File Path、Image File Path 的配置</li><li>Symbol File Path ：这里就是加載pdb文件的路徑</li><li>Source File Path: 加载程序代码 存放的路径（注意切回發佈版本的代碼）</li><li>Image File Path: 加載exe 存放的路徑</li><li>選擇Open Crash Dump 導入生成的dmp文件</li><li>输入命令 !analyze -v ，等待几秒后会打印出错误信息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682407236891.png" alt="1682407236891"></p><p><img src="https://cdn.jsdelivr.net/gh/ouyujia/blog-img/img/1682407088643.png" alt="1682407088643"></p></blockquote><p>1、Symbol File Path ：這裏就是加載pdb文件的路徑，我們直接使用</p><p>D:/Project/DumTools/<br>1<br>2、 Source File Path: 加载程序代码 存放的路径（注意切回發佈版本的代碼）</p><p>D:/Project/Demo/<br>1<br>3、Image File Path: 加載exe 存放的路徑</p><p>D:/Project/DumTools/<br>1<br>4、選擇Open Crash Dump 導入生成的dmp文件</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><ul><li>用于崩溃调试的dump、pdb、源码需要是同一个版本，一般为发布版本（即客户版本）</li><li>用于崩溃调试的dump、pdb、源码需要区分debug和release否则无法调试</li></ul></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ol><li><a href="https://blog.csdn.net/LiHong333/article/details/129798322?spm=1001.2014.3001.5502">Qt-mingw 生成dump文件并使用vs调试定位错误代码_qt生成dump文件</a></li><li><a href="https://libaineu2004.blog.csdn.net/article/details/108310384?spm=1001.2014.3001.5502">Qt如何在Release编译下怎么调试？怎么生成pdb文件</a></li><li><a href="https://blog.csdn.net/HeroGuo_JP/article/details/105383752"> Window端Qt Create dmp的生成与解析</a></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近因为维护的项目出现崩溃，客户现场的log无法定位，因此需要使用dump文件调试于是查找资料添加了一个崩溃生成d</summary>
      
    
    
    
    <category term="QT" scheme="https://ouyujia.github.io/categories/QT/"/>
    
    <category term="MingW" scheme="https://ouyujia.github.io/categories/QT/MingW/"/>
    
    
    <category term="QT" scheme="https://ouyujia.github.io/tags/QT/"/>
    
    <category term="MingW" scheme="https://ouyujia.github.io/tags/MingW/"/>
    
    <category term="Dump" scheme="https://ouyujia.github.io/tags/Dump/"/>
    
  </entry>
  
  <entry>
    <title>QT数据库</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-05-28T11:54:44.000Z</published>
    <updated>2023-04-28T05:56:04.358Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT模型/视图</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E6%A8%A1%E5%9E%8B-%E8%A7%86%E5%9B%BE/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E6%A8%A1%E5%9E%8B-%E8%A7%86%E5%9B%BE/</id>
    <published>2022-05-28T11:54:22.000Z</published>
    <updated>2023-04-28T05:56:04.359Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT样式基类</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E6%A0%B7%E5%BC%8F%E5%9F%BA%E7%B1%BB/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E6%A0%B7%E5%BC%8F%E5%9F%BA%E7%B1%BB/</id>
    <published>2022-05-28T11:53:44.000Z</published>
    <updated>2023-04-28T05:56:04.359Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT自定义部件</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E8%87%AA%E5%AE%9A%E4%B9%89%E9%83%A8%E4%BB%B6/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E8%87%AA%E5%AE%9A%E4%B9%89%E9%83%A8%E4%BB%B6/</id>
    <published>2022-05-28T11:53:20.000Z</published>
    <updated>2023-04-28T05:56:04.360Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT绘图</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E7%BB%98%E5%9B%BE/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E7%BB%98%E5%9B%BE/</id>
    <published>2022-05-28T11:52:52.000Z</published>
    <updated>2023-04-28T05:56:04.359Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT串口通讯</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/</id>
    <published>2022-05-28T11:52:29.000Z</published>
    <updated>2023-04-28T05:56:04.357Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT网络通讯</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/</id>
    <published>2022-05-28T11:52:10.000Z</published>
    <updated>2023-04-28T05:56:04.360Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT线程</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E7%BA%BF%E7%A8%8B/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-05-28T11:51:49.000Z</published>
    <updated>2023-04-28T05:56:04.359Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT部件基类</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E9%83%A8%E4%BB%B6%E5%9F%BA%E7%B1%BB/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E9%83%A8%E4%BB%B6%E5%9F%BA%E7%B1%BB/</id>
    <published>2022-05-28T11:51:29.000Z</published>
    <updated>2023-04-28T05:56:04.360Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT对象基类</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%B1%BB/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%B1%BB/</id>
    <published>2022-05-28T11:50:59.000Z</published>
    <updated>2023-04-28T05:56:04.358Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT事件</title>
    <link href="https://ouyujia.github.io/2022/05/28/QT%E4%BA%8B%E4%BB%B6/"/>
    <id>https://ouyujia.github.io/2022/05/28/QT%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-05-28T11:50:04.000Z</published>
    <updated>2023-04-28T05:56:04.358Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>空悬指针和野指针</title>
    <link href="https://ouyujia.github.io/2022/05/09/%E7%A9%BA%E6%82%AC%E6%8C%87%E9%92%88%E5%92%8C%E9%87%8E%E6%8C%87%E9%92%88/"/>
    <id>https://ouyujia.github.io/2022/05/09/%E7%A9%BA%E6%82%AC%E6%8C%87%E9%92%88%E5%92%8C%E9%87%8E%E6%8C%87%E9%92%88/</id>
    <published>2022-05-09T11:03:39.000Z</published>
    <updated>2023-04-28T05:56:04.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空悬指针"><a href="#空悬指针" class="headerlink" title="空悬指针"></a>空悬指针</h2><p>简单地说，空悬指针是对象的指针的生存周期比对象更长所导致的，也就是说，<font color="orange"><code>对象销毁、删除了，不存在了，指针仍然存在，这时这个指针就成了空悬指针。</code></font><br>当对象被析构、删除时，如果指向它的指针没有被同时修改，那么指针仍然会指向那块内存（但是那块内存已经没有东西了）。系统此时可能会重新分配这块已经free掉的内存。<font color="red"><code>如果程序再通过这个指针读这块内存，就可能会有不可预见的事情发生，因为这块内存可能被分配了完全不同的内容。</code></font>如果程序此时要写这块内存，就可能会造成数据污染，进而可能带来超级难被发现的bug。<font color="red"><code>如果内存已经被其它进程重新分配，此时再去访问指针指向的内容，就可能会发生片段错误(UNIX,Linux)或者一般性保护错误(Windows).如果程序有足够的权限去重写内核内存分配器的内容，还可能造成系统的不稳定。</code></font>在有垃圾回收机制的面向对象语言中，阻止空悬引用的方法是销毁所有访问不到的对象，也就是说他们也就没有所谓的指针了，这是由追踪或引用计数而确保的。然而finalizer可能会创建新的对象的引用，这就要求对象要再生来防止空悬引用。</p><p>以下举例说明空悬指针：</p><p>例1</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">   <span class="type">char</span> *dp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="comment">/* ... */</span></span><br><span class="line">   {</span><br><span class="line">       <span class="type">char</span> c; <span class="comment">//出了作用域系统自动销毁局部变量</span></span><br><span class="line">       dp = &amp;c;</span><br><span class="line">   }  </span><br><span class="line"><span class="comment">//到这里，c已经被销毁了，dp就变成了空悬指针(dp没有修改其指向正确的地址，它依然指向c的指针，但c的地址已不属于本程序)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例2</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">test_array</span><span class="params">(<span class="type">int</span> *a)</span></span>{</span><br><span class="line"><span class="type">int</span> length = <span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> *b = <span class="keyword">new</span> <span class="type">int</span> [length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">{</span><br><span class="line">*b++=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="type">int</span> a [<span class="number">5</span>] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"><span class="type">int</span> *b = <span class="built_in">test_array</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">{</span><br><span class="line">cout&lt;&lt;b[i]&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">51</span></span><br></pre></td></tr></tbody></table></figure><p>就像这样，因为虽然返回了一个指针，但是这个指针指向的对象在函数返回时已经销毁了，因此返回的值是不确定的。如果接下来还想用，那么得用引用的方法传参。</p><p>消除空悬指针的方式</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span> *dp = <span class="built_in">malloc</span>(A_CONST);</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="built_in">free</span>(dp);         <span class="comment">/* dp 现在是空悬指针 */</span></span><br><span class="line">    dp = <span class="literal">NULL</span>;        <span class="comment">/* dp 不再是空悬指针*/</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注意：</p><blockquote><p>悬浮指针所指向的内存不属于当前程序，但是因为知道内存的指针，当前程序还是可以追寻到这块地址并修改它的值，如果操作系统没有将这块内存分配给其他程序，当前系统对该内存的操作不会出现问题（严禁这么做，因为你不知道什么时候操作系统会将这块内存分配给其他程序），如果操作系统已经将这块内存分配给其他程序，此时当前程序通过指针对这块内存进行操作就可能会发生片段错误(UNIX,Linux)或者一般性保护错误(Windows)。</p></blockquote><p>下面是一段简单的测试代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//悬浮指针， 野指针的一种，使用后结果不可控，非常危险</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>* int_pointer = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"赋值前地址:"</span> &lt;&lt; int_pointer;</span><br><span class="line">    *int_pointer = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"赋值后地址:"</span> &lt;&lt; int_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"delete前值:"</span> &lt;&lt; *int_pointer;</span><br><span class="line">    <span class="keyword">delete</span> int_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"delete后值:"</span> &lt;&lt; *int_pointer;</span><br><span class="line"><span class="comment">//    int * int_pointer_second = int_pointer;</span></span><br><span class="line">    <span class="type">double</span> * double_pointer = (<span class="type">double</span>*) int_pointer;</span><br><span class="line">    *double_pointer = <span class="number">8.4</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"delete后地址:"</span> &lt;&lt; int_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"double delete后地址:"</span> &lt;&lt; double_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"int delete后值1:"</span> &lt;&lt; *int_pointer; <span class="comment">//此时变量被double值占用，输出为垃圾值（-858993459）</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"double delete后值1:"</span> &lt;&lt; *double_pointer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    *int_pointer = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"double delete后值2:"</span> &lt;&lt; *double_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"delete后赋值2:"</span> &lt;&lt; *int_pointer;</span><br><span class="line">    int_pointer = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"nullptr后地址:"</span> &lt;&lt; int_pointer;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"nullptr后地址double:"</span> &lt;&lt; double_pointer;</span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; "nullptr后值:" &lt;&lt; *int_pointer; //报错 无法操作空指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">赋值前地址: <span class="number">0x35dc900</span></span><br><span class="line">赋值后地址: <span class="number">0x35dc900</span></span><br><span class="line"><span class="keyword">delete</span>前值: <span class="number">5</span></span><br><span class="line"><span class="keyword">delete</span>后值: <span class="number">5</span></span><br><span class="line"><span class="keyword">delete</span>后地址: <span class="number">0x35dc900</span></span><br><span class="line"><span class="type">double</span> <span class="keyword">delete</span>后地址: <span class="number">0x35dc900</span></span><br><span class="line"><span class="type">int</span> <span class="keyword">delete</span>后值<span class="number">1</span>: <span class="number">-858993459</span></span><br><span class="line"><span class="type">double</span> <span class="keyword">delete</span>后值<span class="number">1</span>: <span class="number">8.4</span></span><br><span class="line"><span class="type">double</span> <span class="keyword">delete</span>后值<span class="number">2</span>: <span class="number">8.39999</span></span><br><span class="line"><span class="keyword">delete</span>后赋值<span class="number">2</span>: <span class="number">9</span></span><br><span class="line"><span class="literal">nullptr</span>后地址: <span class="number">0x0</span></span><br><span class="line"><span class="literal">nullptr</span>后地址<span class="type">double</span>: <span class="number">0x35dc900</span></span><br></pre></td></tr></tbody></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p><font color="orange"><code>野指针作为一个指针，甚至都没有被初始化，也就是说虽然它的类型是一个指针，但它根本没有值。</code></font>它跟NULL指针还有差别，NULL是指向了0地址，而野指针是没有地址。也就相当于，int a=0;和int a;的区别。野指针非常危险，往往会引起程序奔溃。</p><p>举例说明：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span> *dp;<span class="comment">//野指针，没有初始化</span></span><br><span class="line">    <span class="comment">//定义一个测试类testClass，包含一个成员函数void show();</span></span><br><span class="line">    testClass * test; <span class="comment">//野指针，没有初始化</span></span><br><span class="line">    test.<span class="built_in">show</span>(); <span class="comment">//系统将奔溃</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *sdp; <span class="comment">//非野指针，因为静态变量会默认初始化为0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">C++空悬指针和野指针浅谈</summary>
    
    
    
    <category term="C++" scheme="https://ouyujia.github.io/categories/C/"/>
    
    <category term="指针" scheme="https://ouyujia.github.io/categories/C/%E6%8C%87%E9%92%88/"/>
    
    
    <category term="C++" scheme="https://ouyujia.github.io/tags/C/"/>
    
    <category term="指针" scheme="https://ouyujia.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
